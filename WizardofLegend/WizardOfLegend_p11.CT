<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="28">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Enable .2"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
LaunchMonoDataCollector()
{$asm}

label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,Player:Update)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbp
mov rbp,rsp
push rsi
mov rsi,pPlayer
mov [rsi],rcx

originalcode:
//push rbp
//mov rbp,rsp
//push rsi

exit:
jmp returnhere

///
pPlayer:
///

Player:Update:
jmp newmem
returnhere:

///*********************************************///
label(pPlayerStatusBar)
registersymbol(pPlayerStatusBar)
alloc(newmem2,2048,PlayerStatusBar:Update+5)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rsi,pPlayer
mov rsi,[rsi]
cmp [rcx+18],rsi
jne @f
mov rsi,pPlayerStatusBar
mov [rsi],rcx

originalcode2:
sub rsp,08
mov rsi,rcx

exit2:
jmp returnhere2

///
pPlayerStatusBar:
///

PlayerStatusBar:Update+5:
jmp newmem2
nop
nop
returnhere2:

///*********************************************///
aobscanregion(gemWalletBaseReadForGameUIUpdateAOB,GameUI:Update,GameUI:Update+265,48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
registersymbol(gemWalletBaseReadForGameUIUpdateAOB)

label(pPlatWallet)
registersymbol(pPlatWallet)

alloc(newmem6,2048,gemWalletBaseReadForGameUIUpdateAOB+11) //GameUI:Update+169)
label(returnhere6)
label(originalcode6_enable)
registersymbol(originalcode6_enable)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov r11,pPlatWallet
mov [r11],rcx

originalcode6_enable:
readmem(gemWalletBaseReadForGameUIUpdateAOB+11,8)
//add rcx,28
//sub rsp,20

exit6:
jmp returnhere6

///
pPlatWallet:
///

gemWalletBaseReadForGameUIUpdateAOB+11: //GameUI:Update+169:
jmp newmem6
nop
nop
nop
returnhere6:

///*********************************************///
aobscanregion(goldWalletBaseReadForGameUIUpdateAOB,GameUI:Update,GameUI:Update+265,48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** ** ** ** ** ** ** ** ** ** 48 ** ** ** E9)
registersymbol(goldWalletBaseReadForGameUIUpdateAOB)

label(pGoldWallet)
registersymbol(pGoldWallet)

alloc(newmem11,2048,goldWalletBaseReadForGameUIUpdateAOB+11) //GameUI:Update+1bd)
label(returnhere11)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov r11,pGoldWallet
mov [r11],rcx

originalcode11_enable:
readmem(goldWalletBaseReadForGameUIUpdateAOB+11,8)
//add rcx,28
//sub rsp,20

exit11:
jmp returnhere11

///
pGoldWallet:
///

goldWalletBaseReadForGameUIUpdateAOB+11: //GameUI:Update+1bd:
jmp newmem11
nop
nop
nop
returnhere11:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Player:Update:
db 55 48 8B EC 56
//Alt: push rbp
//Alt: mov rbp,rsp
//Alt: push rsi

unregistersymbol(pPlayer)

///*********************************************///
dealloc(newmem2)
PlayerStatusBar:Update+5:
db 48 83 EC 08 48 8B F1
//Alt: sub rsp,08
//Alt: mov rsi,rcx

unregistersymbol(pPlayerStatusBar)

///*********************************************///
dealloc(newmem6)
gemWalletBaseReadForGameUIUpdateAOB+11: //GameUI:Update+169:
readmem(originalcode6_enable,8)
//db 48 83 C1 28 48 83 EC 20
//Alt: add rcx,28
//Alt: sub rsp,20
unregistersymbol(originalcode6_enable)

unregistersymbol(pPlatWallet)

///*********************************************///
dealloc(newmem11)
goldWalletBaseReadForGameUIUpdateAOB+11: //GameUI:Update+1bd:
readmem(originalcode11_enable,8)
//db 48 83 C1 28 48 83 EC 20
//Alt: add rcx,28
//Alt: sub rsp,20
unregistersymbol(originalcode11_enable)

unregistersymbol(pGoldWallet)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Undead"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
LaunchMonoDataCollector()
{$asm}

aobscanregion(NumVarStat__set_CurrentValueAOB,NumVarStat:set_CurrentValue,NumVarStat:set_CurrentValue+11a,F3 0F 10 ** ** F3 0F 5A C0)
registersymbol(NumVarStat__set_CurrentValueAOB)

label(dMinHealth)
registersymbol(dMinHealth)

alloc(newmem,2048,NumVarStat__set_CurrentValueAOB) //NumVarStat:set_CurrentValue+5e)
label(returnhere)
label(originalcode_undead)
registersymbol(originalcode_undead)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayer
mov rcx,[rcx]
test rcx,rcx
jz @f
mov rcx,[rcx+40]
test rcx,rcx
jz @f
cmp [rcx+c0],rsi
jne @f
mov rcx,dMinHealth
movss xmm0,[rcx]
db 0F 2F
readmem(NumVarStat__set_CurrentValueAOB+3,2)
//comiss xmm0,[rbp-10]
jbe @f
readmem(NumVarStat__set_CurrentValueAOB,2)
db 11
readmem(NumVarStat__set_CurrentValueAOB+3,2)
//movss [rbp-10],xmm0

originalcode_undead:
readmem(NumVarStat__set_CurrentValueAOB,5)
//movss xmm0,[rbp-10]

exit:
jmp returnhere

///
dMinHealth:
dd (float)1
///

NumVarStat__set_CurrentValueAOB: //NumVarStat:set_CurrentValue+5e:
jmp newmem
returnhere:

///*********************************************///
//Health:TakeDamage+1dfa:
//test esp,esp


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
NumVarStat__set_CurrentValueAOB: //NumVarStat:set_CurrentValue+5e:
readmem(originalcode_undead,5)
//db F3 0F 10 45 F0
//Alt: movss xmm0,[rbp-10]
unregistersymbol(originalcode_undead)

unregistersymbol(dMinHealth)

///*********************************************///
//Health:TakeDamage+1dfa:
//db 85 C0
////Alt: test eax,eax
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>39</ID>
              <Description>""</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>37</ID>
                  <Description>"Min Health"</Description>
                  <LastState Value="1" RealAddress="07A60060"/>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dMinHealth</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>22</ID>
          <Description>"No Cooldown"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(Cooldown__get_ChargesMissingAOB,Cooldown:get_ChargesMissing,Cooldown:get_ChargesMissing+2d,48 ** ** ** 2B C1)
registersymbol(Cooldown__get_ChargesMissingAOB)

alloc(newmem,2048,Cooldown__get_ChargesMissingAOB) //Cooldown:get_ChargesMissing+21)
label(returnhere)
label(originalcode_maxmagiccharge)
registersymbol(originalcode_maxmagiccharge)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 89 46
readmem(Cooldown__get_ChargesMissingAOB+3,1)
//mov [rsi+38],eax

originalcode_maxmagiccharge:
readmem(Cooldown__get_ChargesMissingAOB,6)
//movsxd  rcx,dword ptr [rsi+38]
//sub eax,ecx

exit:
jmp returnhere

///

Cooldown__get_ChargesMissingAOB: //Cooldown:get_ChargesMissing+21:
jmp newmem
nop
returnhere:

///***********************************///
aobscanregion(Cooldown__get_IsChargingAOB,Cooldown:get_IsCharging,Cooldown:get_IsCharging+58,40 0F 94 C0 48 0F B6 C0)
registersymbol(Cooldown__get_IsChargingAOB)

Cooldown__get_IsChargingAOB: //Cooldown:get_IsCharging+31:
db 90 90 30


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Cooldown__get_ChargesMissingAOB: //Cooldown:get_ChargesMissing+21:
readmem(originalcode_maxmagiccharge,6)
//db 48 63 4E 38 2B C1
//Alt: movsxd  rcx,dword ptr [rsi+38]
//Alt: sub eax,ecx
unregistersymbol(originalcode_maxmagiccharge)

///***********************************///
Cooldown__get_IsChargingAOB: //Cooldown:get_IsCharging+31:
db 40 0F 94
//Alt: sete
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>86</ID>
          <Description>"Enhanced Magic .4"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(skillIsEmpoweredChkForDisplayAOB,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,48 83 EC 20 48 8B ** ** ** ** ** ** ** ** ** ** 48 83 C4 20 4C 8B C0)
registersymbol(skillIsEmpoweredChkForDisplayAOB)

label(bEnhancedMagicScriptState)
registersymbol(bEnhancedMagicScriptState)
label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

alloc(newmem,2048,skillIsEmpoweredChkForDisplayAOB) //CooldownEntry:EntryUpdate+cf)
label(returnhere)
label(originalcode_skillIsEmpoweredChkForDisplayAOB)
registersymbol(originalcode_skillIsEmpoweredChkForDisplayAOB)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx
push rax

readmem(skillIsEmpoweredChkForDisplayAOB+4,3)
//mov rax,[rax]
db 48 8B 80
readmem(skillIsEmpoweredChkForDisplayAOB+c,4)
//mov rax,[rax+120]

mov rbx,cSkillStateGetIsEmpowered
mov rbx,[rbx]
test rbx,rbx
jnz @f

cmp byte ptr [rax],E8  //chk if SkillState:get_IsEmpowered is jit yet.
je end
cmp byte ptr [rax],55
jne end
mov rbx,cSkillStateGetIsEmpowered
mov [rbx],rax

push [rax]
pop [rbx+8]
push [rax+8]
pop [rbx+10]

mov rbx,000000000001B848
mov [rax],rbx
mov ebx,90C30000
mov [rax+8],ebx
//48 B8 0100000000000000 - mov rax,0000000000000001 { 1 }
//C3                     - ret
//90                     - nop
jmp end

@@:
mov rbx,bEnhancedMagicScriptState
cmp byte ptr [rbx],1
jl end

mov rbx,cSkillStateGetIsEmpowered
push [rbx+8]
pop [rax]
push [rbx+10]
pop [rax+8]
//mov rbx,10EC8348EC8B4855
//mov [rax],rbx
//mov ebx,F84D8948
//mov [rax+8],ebx
//55                    - push rbp
//48 8B EC              - mov rbp,rsp
//48 83 EC 10           - sub rsp,10
//48 89 4D F8

mov rbx,bEnhancedMagicScriptState
mov byte ptr [rbx],2

end:
pop rax
pop rbx

originalcode_skillIsEmpoweredChkForDisplayAOB:
readmem(skillIsEmpoweredChkForDisplayAOB,7)
//sub rsp,20
//mov rax,[rax]

exit:
jmp returnhere

///
bEnhancedMagicScriptState:
dd 0
cSkillStateGetIsEmpowered:
dq 0
///

skillIsEmpoweredChkForDisplayAOB: //CooldownEntry:EntryUpdate+cf:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//modified from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEnhancedMagicScriptState" ) == 0 then --could be 2 already
  writeInteger( "bEnhancedMagicScriptState", 1 ) --tell the script to restore the codes
end

if readInteger( "cSkillStateGetIsEmpowered" ) == 0 then --if the injection point isn't even jit yet
  writeInteger( "bEnhancedMagicScriptState", 2 ) --let the script to deactivate
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEnhancedMagicScriptState" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the script failed!\nHa' )
  error( 'Script disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//cSkillStateGetIsEmpowered:
//dd 1

///*****************************************///
dealloc(newmem)
skillIsEmpoweredChkForDisplayAOB: //CooldownEntry:EntryUpdate+cf:
readmem(originalcode_skillIsEmpoweredChkForDisplayAOB,7)
//db 48 83 EC 20 48 8B 00
//Alt: sub rsp,20
//Alt: mov rax,[rax]
unregistersymbol(originalcode_skillIsEmpoweredChkForDisplayAOB)

unregistersymbol(bEnhancedMagicScriptState)
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Overdrive Key"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(Player__get_OverdrivePercentageAOB,Player:get_OverdrivePercentage,Player:get_OverdrivePercentage+56,F3 0F 10 ** ** ** ** ** F3 0F 5A C0)
registersymbol(Player__get_OverdrivePercentageAOB)

label(bOverdriveKeyPressed)
registersymbol(bOverdriveKeyPressed)

alloc(newmem,2048,Player__get_OverdrivePercentageAOB) //Player:get_OverdrivePercentage+f)
label(returnhere)
label(originalcode_overridekey)
registersymbol(originalcode_overridekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [bOverdriveKeyPressed],1
jne @f
db C7
readmem(Player__get_OverdrivePercentageAOB+3,5)
dd (float)100
//mov dword ptr [eax+32c],(float)100

originalcode_overridekey:
readmem(Player__get_OverdrivePercentageAOB,8)
//movss xmm0,[rax+0000032C]

exit:
jmp returnhere

///
bOverdriveKeyPressed:
///

Player__get_OverdrivePercentageAOB: //Player:get_OverdrivePercentage+f:
jmp newmem
nop
nop
nop
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_Overridekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_Overridekeylistener_mem)

alloc(WizardOfLegend_Overridekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_Overridekeylistener_mem)
createthread(WizardOfLegend_Overridekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_Overridekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,14 //CAPS LOCK key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bOverdriveKeyPressed
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_Overridekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_Overridekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_Overridekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_Overridekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_Overridekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_Overridekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_Overridekeylistener_mem:
//dd 1

///*****************************************///
dealloc(newmem)
Player__get_OverdrivePercentageAOB: //Player:get_OverdrivePercentage+f:
readmem(originalcode_overridekey,8)
//db F3 0F 10 80 2C 03 00 00
//Alt: movss xmm0,[rax+0000032C]
unregistersymbol(originalcode_overridekey)

unregistersymbol(bOverdriveKeyPressed)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_Overridekeylistener_mem)

dealloc(WizardOfLegend_Overridekeylistener_mem)
unregistersymbol(WizardOfLegend_Overridekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>35</ID>
              <Description>"CapsLock key"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Ignore Balance"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
///***********************************/// gem
aobscanregion(cJmpIfEnoughGemBalanceToBuyItemAOB,ItemStoreItem:Buy,ItemStoreItem:Buy+b67,48 ** ** ** ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughGemBalanceToBuyItemAOB)

cJmpIfEnoughGemBalanceToBuyItemAOB+9: //ItemStoreItem:Buy+88:
db 90 E9

///***********************************///
aobscanregion(cJmpIfEnoughGemBalanceToBuySkillAOB,SkillStoreItem:Buy,SkillStoreItem:Buy+657,48 ** ** ** ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughGemBalanceToBuySkillAOB)

cJmpIfEnoughGemBalanceToBuySkillAOB+9: //SkillStoreItem:Buy+6e:
db 90 E9

///***********************************///
aobscanregion(cJmpIfEnoughGemBalanceToBuyOutfitAOB,OutfitStoreItem:Buy,OutfitStoreItem:Buy+315,48 ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughGemBalanceToBuyOutfitAOB)

cJmpIfEnoughGemBalanceToBuyOutfitAOB+6: //OutfitStoreItem:Buy+51:
db 90 E9

///***********************************/// gold
aobscanregion(cJmpIfEnoughGoldBalanceToBuyItemAOB,StoreItem:Buy,StoreItem:Buy+305,48 ** ** ** ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughGoldBalanceToBuyItemAOB)

cJmpIfEnoughGoldBalanceToBuyItemAOB+9: //StoreItem:Buy+66:
db 90 E9

///***********************************///
aobscanregion(cJmpIfEnoughGoldBalanceToEnhanceOutfitAOB,TailorNpc:HandleConditionalInteraction,TailorNpc:HandleConditionalInteraction+567,48 ** ** ** 48 ** ** ** ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughGoldBalanceToEnhanceOutfitAOB)

cJmpIfEnoughGoldBalanceToEnhanceOutfitAOB+d: //TailorNpc:HandleConditionalInteraction+cb:
db 90 E9

///***********************************///
aobscanregion(balanceWriteOnWalletWithdrawAOB,Wallet:Withdraw,Wallet:Withdraw+4b,48 ** ** ** 2B C6 85 C0)
registersymbol(balanceWriteOnWalletWithdrawAOB)

alloc(newmem,2048,balanceWriteOnWalletWithdrawAOB) //Wallet:Withdraw+c)
label(returnhere)
label(originalcode_ignorebalance)
registersymbol(originalcode_ignorebalance)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(balanceWriteOnWalletWithdrawAOB,6)
//movsxd rax,dword ptr [rdi+28]
//sub eax,esi
jns @f
xor eax,eax
db 89 77
readmem(balanceWriteOnWalletWithdrawAOB+3,1)
//mov [rdi+28],esi

@@:
jmp exit

originalcode_ignorebalance:
readmem(balanceWriteOnWalletWithdrawAOB,6)
//movsxd  rax,dword ptr [rdi+28]
//sub eax,esi

exit:
jmp returnhere

///

balanceWriteOnWalletWithdrawAOB: //Wallet:Withdraw+c:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
///***********************************/// gem
cJmpIfEnoughGemBalanceToBuyItemAOB+9: //ItemStoreItem:Buy+88:
db 0F 8D
//Alt: jnl

///***********************************///
cJmpIfEnoughGemBalanceToBuySkillAOB+9: //SkillStoreItem:Buy+6e:
db 0F 8D
//Alt: jnl

///***********************************///
//code from here till the end of the code will be used to disable the cheat
cJmpIfEnoughGemBalanceToBuyOutfitAOB+6: //OutfitStoreItem:Buy+51:
db 0F 8D
//Alt: jnl

///***********************************/// gold
cJmpIfEnoughGoldBalanceToBuyItemAOB+9: //StoreItem:Buy+66:
db 0F 8D
//Alt: jnl

///***********************************///
cJmpIfEnoughGoldBalanceToEnhanceOutfitAOB+d: //TailorNpc:HandleConditionalInteraction+cb:
db 0F 8D
//Alt: jnl

///***********************************///
dealloc(newmem)
balanceWriteOnWalletWithdrawAOB: //Wallet:Withdraw+c:
readmem(originalcode_ignorebalance,6)
//db 48 63 47 28 2B C6
//Alt: movsxd  rax,dword ptr [rdi+28]
//Alt: sub eax,esi
unregistersymbol(originalcode_ignorebalance)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Magic Change Key .11"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeElementModKey)
registersymbol(bMagicChangeElementModKey)
label(bMagicChangeSubCatModKey)
registersymbol(bMagicChangeSubCatModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1b0]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeElementModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:
cmp byte ptr [rdx+8],1
je @f
mov byte ptr [rdx+9],0
jmp chkmagic4changekey

@@:
cmp rcx,2
jne end
cmp byte ptr [rdx+9],1
je chkmagic4changekey
mov byte ptr [rdx+9],1
jmp isstandardskill

//
chkmagic4changekey:
cmp byte ptr [rdx+c],1
je @f
mov byte ptr [rdx+d],0
jmp chkmagic5changekey

@@:
cmp rcx,3
jne end
cmp byte ptr [rdx+d],1
je chkmagic5changekey
mov byte ptr [rdx+d],1
jmp issignatureskill

//
chkmagic5changekey:
cmp byte ptr [rdx+10],1
je @f
mov byte ptr [rdx+11],0
jmp chkmagic6changekey

@@:
cmp rcx,4
jne end
cmp byte ptr [rdx+11],1
je chkmagic6changekey
mov byte ptr [rdx+11],1
jmp isextra1skill

//
chkmagic6changekey:
cmp byte ptr [rdx+14],1
je @f
mov byte ptr [rdx+15],0
jmp chkmagicchangekeyend

@@:
cmp rcx,5
jne end
cmp byte ptr [rdx+15],1
je chkmagicchangekeyend
mov byte ptr [rdx+15],1
jmp isextra2skill

//
chkmagicchangekeyend:

jmp end

/////
//*
isbasicskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isdashskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isstandardskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextstandardskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextstandardskillloop
cmp byte ptr [rdi+66],1
je findnextstandardskillloop
cmp byte ptr [rdi+67],1
je findnextstandardskillloop
cmp byte ptr [rdi+5f],1
je findnextstandardskillloop
cmp [rdi+58],r9d
jne findnextstandardskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextstandardskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
issignatureskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextsignatureskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextsignatureskillloop
cmp byte ptr [rdi+66],1
je findnextsignatureskillloop
cmp byte ptr [rdi+67],1
je findnextsignatureskillloop
//cmp byte ptr [rdi+5f],0
//je findnextsignatureskillloop
cmp [rdi+58],r9d
jne findnextsignatureskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextsignatureskillloop
@@:
cmp byte ptr [rdi+5d],1
jne findnextsignatureskillloop
//mov byte ptr [rdi+5f],1

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isextra1skill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextextra1skillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextextra1skillloop
cmp byte ptr [rdi+66],1
je findnextextra1skillloop
cmp byte ptr [rdi+67],1
je findnextextra1skillloop
cmp byte ptr [rdi+5f],1
je findnextextra1skillloop
cmp [rdi+58],r9d
jne findnextextra1skillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextextra1skillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isextra2skill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextextra2skillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextextra2skillloop
cmp byte ptr [rdi+66],1
je findnextextra2skillloop
cmp byte ptr [rdi+67],1
je findnextextra2skillloop
cmp byte ptr [rdi+5f],1
je findnextextra2skillloop
cmp [rdi+58],r9d
jne findnextextra2skillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextextra2skillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//
end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c8]
test rsi,rsi
jz @f
mov rax,[rsi+20]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeElementModKey:
dd 0
bMagicChangeSubCatModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeElementModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

sub rsp,10

mov dword ptr [rsp],68 //movement skill
mov rcx,60 //Numeric keypad 0 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6a //projectile skill
mov rcx,61 //Numeric keypad 1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6b //wave skill
mov rcx,62 //Numeric keypad 2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6c //buff skill
mov rcx,63 //Numeric keypad 3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6d //summon skill
mov rcx,64 //Numeric keypad 4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6e //ward skill
mov rcx,65 //Numeric keypad 5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
xor dx,dx
mov [rcx+2],dx

subcatmodkeychkend:
add rsp,10

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeElementModKey)
unregistersymbol(bMagicChangeSubCatModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>94</ID>
              <Description>"1,2,3,4,5,6"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>112</ID>
              <Description>"Alt : Element"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>113</ID>
              <Description>"numpad0 : Movement"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>114</ID>
              <Description>"numpad1 : Projectile"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"numpad2 : Wave"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"numpad3 : Buff"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>117</ID>
              <Description>"numpad4 : Summon"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"numpad5 : Ward"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"[Player]"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="480B6550"/>
          <Color>000080</Color>
          <VariableType>Array of byte</VariableType>
          <ByteLength>0</ByteLength>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"[health]"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="42645550"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>000080</Color>
              <VariableType>Array of byte</VariableType>
              <ByteLength>0</ByteLength>
              <Address>+40</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>7</ID>
                  <Description>"[healthStat]"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="480B10A0"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>000080</Color>
                  <VariableType>Array of byte</VariableType>
                  <ByteLength>0</ByteLength>
                  <Address>+c8</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8</ID>
                      <Description>"_currentValue"</Description>
                      <Options moHideChildren="1"/>
                      <LastState Value="500" RealAddress="480B10C8"/>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>+28</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>20</Key>
                            <Key>81</Key>
                          </Keys>
                          <Value>(_maxHP)</Value>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>58</ID>
                          <Description>"_maxHP"</Description>
                          <LastState Value="500" RealAddress="480B10D0"/>
                          <Color>0000FF</Color>
                          <VariableType>Float</VariableType>
                          <Address>+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>9</ID>
                      <Description>"_baseValue"</Description>
                      <LastState Value="500" RealAddress="480B10CC"/>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>+2c</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>10</ID>
                      <Description>"_modifiedValue"</Description>
                      <LastState Value="500" RealAddress="480B10D0"/>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>+30</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>11</ID>
                      <Description>"syncCurrentToModMax"</Description>
                      <LastState Value="0" RealAddress="480B10D8"/>
                      <Color>0000FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>+38</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>12</ID>
                      <Description>"minCurrentVal"</Description>
                      <LastState Value="0" RealAddress="480B10DC"/>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>+3c</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13</ID>
                      <Description>"minMaxVal"</Description>
                      <LastState Value="1" RealAddress="480B10E0"/>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>+40</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14</ID>
                  <Description>"[deathProof]"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="42C2F9C0"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>000080</Color>
                  <VariableType>Array of byte</VariableType>
                  <ByteLength>0</ByteLength>
                  <Address>+108</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>15</ID>
                      <Description>"_currentValue"</Description>
                      <LastState Value="0" RealAddress="42C2F9E8"/>
                      <Color>0000FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>16</ID>
                      <Description>"_baseValue"</Description>
                      <LastState Value="0" RealAddress="42C2F9E9"/>
                      <Color>0000FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>+29</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>17</ID>
                      <Description>"_modifiedValue"</Description>
                      <LastState Value="0" RealAddress="42C2F9EA"/>
                      <Color>0000FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>+2a</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"[PlayerStatusBar]"</Description>
          <LastState Value="" RealAddress="42954540"/>
          <Color>000080</Color>
          <VariableType>Array of byte</VariableType>
          <ByteLength>0</ByteLength>
          <Address>pPlayerStatusBar</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"[Gem Wallet]"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="42B5B4B0"/>
          <Color>000080</Color>
          <VariableType>Array of byte</VariableType>
          <ByteLength>0</ByteLength>
          <Address>pPlatWallet</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>49</ID>
              <Description>"balance"</Description>
              <LastState Value="0" RealAddress="42B5B4D8"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+28</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"maxBalance"</Description>
              <LastState Value="999" RealAddress="42B5B4DC"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+2c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"[Gold Wallet]"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="42B5B510"/>
          <Color>000080</Color>
          <VariableType>Array of byte</VariableType>
          <ByteLength>0</ByteLength>
          <Address>pGoldWallet</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>56</ID>
              <Description>"balance"</Description>
              <LastState Value="200" RealAddress="42B5B538"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+28</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"maxBalance"</Description>
              <LastState Value="9999" RealAddress="42B5B53C"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+2c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>""</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>45</ID>
          <Description>"aobt1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(aobt1,GameUI:Update,GameUI:Update+265,48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
//aobscanregion(aobt1,GameUI:Update,GameUI:Update+265,48 ** ** ** ** ** ** ** 48 85 C9 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
registersymbol(aobt1)
//48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** ** ** ** ** ** ** ** ** ** 48 ** ** ** E9
//48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48
//48 ** ** ** ** ** ** ** 48 ** ** 0F 84 ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48
//48 ** ** ** ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(aobt1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"aobt2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(aobt2,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,48 83 EC 20 48 8B ** ** ** ** ** ** ** ** ** ** 48 83 C4 20 4C 8B C0)
registersymbol(aobt2)

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(aobt2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(pPlayerStatusBar)
registersymbol(pPlayerStatusBar)
alloc(newmem2,2048,PlayerStatusBar:Update+5) 
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rsi,pPlayer
mov rsi,[rsi]
cmp [rcx+18],rsi
jne @f
mov rsi,pPlayerStatusBar
mov [rsi],rcx

originalcode2:
sub rsp,08
mov rsi,rcx

exit2:
jmp returnhere2

///
pPlayerStatusBar:
///

PlayerStatusBar:Update+5:
jmp newmem2
nop
nop
returnhere2:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
PlayerStatusBar:Update+5:
db 48 83 EC 08 48 8B F1
//Alt: sub rsp,08
//Alt: mov rsi,rcx

unregistersymbol(pPlayerStatusBar)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"currentHealth"</Description>
          <VariableType>Float</VariableType>
          <Address>2B9E106C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Float"</Description>
          <VariableType>Float</VariableType>
          <Address>27195840</Address>
          <Offsets>
            <Offset>28</Offset>
            <Offset>C0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"chargeCount"</Description>
          <LastState Value="1378439720" RealAddress="2EE602B8"/>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>2EE602B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bChargeKeyPressed)
registersymbol(bChargeKeyPressed)

alloc(newmem,2048,ProjectileChainAttackState:HandleHoldButton+13d) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx
mov rbx,bChargeKeyPressed
movzx rbx,byte ptr [rbx]
inc ebx
cmp ecx,ebx
jge @f
mov ecx,ebx
@@:
pop rbx

originalcode:
mov [rax+38],ecx
mov rax,[rsi+40]

exit:
jmp returnhere

///
bChargeKeyPressed:
///

ProjectileChainAttackState:HandleHoldButton+13d:
jmp newmem
nop
nop
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_Chargekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_Chargekeylistener_mem)

alloc(WizardOfLegend_Chargekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_Chargekeylistener_mem)
createthread(WizardOfLegend_Chargekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_Chargekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,14 //CAPS LOCK key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bChargeKeyPressed
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_Chargekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_Chargekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_Chargekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_Chargekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_Chargekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_Chargekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_Chargekeylistener_mem:
//dd 1

///*****************************************///
dealloc(newmem)
ProjectileChainAttackState:HandleHoldButton+13d:
db 89 48 38 48 8B 46 40
//Alt: mov [rax+38],ecx
//Alt: mov rax,[rsi+40]

unregistersymbol(bChargeKeyPressed)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_Chargekeylistener_mem)

dealloc(WizardOfLegend_Chargekeylistener_mem)
unregistersymbol(WizardOfLegend_Chargekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>24</ID>
              <Description>"Auto Assemble script"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048,Cooldown:get_IsCharging+2f) 
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,bChargeKeyPressed
mov al,[rax]
jmp exit2

originalcode2:
test eax,eax
sete al

exit2:
jmp returnhere2

///

Cooldown:get_IsCharging+2f:
jmp newmem2
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
Cooldown:get_IsCharging+2f:
db 85 C0 40 0F 94 C0
//Alt: test eax,eax
//Alt: sete al
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
ProjectileChainAttackState:HandleHoldButton+131:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ProjectileChainAttackState:HandleHoldButton+131:
db 7E 0D
//Alt: jle ProjectileChainAttackState:HandleHoldButton+140
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"remainingTimeStopwatchID"</Description>
          <LastState Value="4080333619" RealAddress="2EE602B0"/>
          <VariableType>4 Bytes</VariableType>
          <Address>2EE602B0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>25</ID>
          <Description>"No Description"</Description>
          <LastState Value="447093414" RealAddress="2EEB8FD4"/>
          <VariableType>4 Bytes</VariableType>
          <Address>2EEB8FD4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
Cooldown:get_IsCharging+31:
db 90 90 30


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Cooldown:get_IsCharging+31:
db 40 0F 94
//Alt: sete
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"effectActive"</Description>
          <VariableType>Byte</VariableType>
          <Address>271959F8</Address>
          <Offsets>
            <Offset>58</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
OverdriveEffects:Update+10:
db 90 90
mov al,1


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
OverdriveEffects:Update+10:
db 0F B6 46 58
//Alt: movzx eax,byte ptr [rsi+58]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(WizardOfLegend_OverdriveToggle_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_OverdriveToggle_mem)
createthread(WizardOfLegend_OverdriveToggle_mem)

WizardOfLegend_OverdriveToggle_mem:
sub rsp,28
mov rcx,pPlayer
test rcx,rcx
jz @f
mov rcx,[rcx]
test rcx,rcx
jz @f
mov rcx,[rcx+1f8]
test rcx,rcx
jz @f
mov rdx,1
call 0D085400 //OverdriveEffects:ToggleAura

@@:
pop rax
add rsp,28
ret

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(WizardOfLegend_Chargekeylistener_mem)
unregistersymbol(WizardOfLegend_Chargekeylistener_mem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"overdriveReady"</Description>
          <VariableType>Byte</VariableType>
          <Address>263BD335</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
Player:HandleOverdrive+2a9:
db 90 90 90 90 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Player:HandleOverdrive+2a9:
db 0F 85 6D 0D 00 00
//Alt: jne Player:HandleOverdrive+101c
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"overdriveValue"</Description>
          <VariableType>Float</VariableType>
          <Address>263BD32C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"overdriveMinValue"</Description>
          <VariableType>Float</VariableType>
          <Address>263BD330</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
Health:TakeDamage+1dfa:
test esp,esp


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Health:TakeDamage+1dfa:
db 85 C0
//Alt: test eax,eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(Player__get_OverdrivePercentageAOB,Player:get_OverdrivePercentage,Player:get_OverdrivePercentage+56,F3 0F 10 ** ** ** ** ** F3 0F 5A C0)
registersymbol(Player__get_OverdrivePercentageAOB)

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(Player__get_OverdrivePercentageAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>2B798DA8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="05302538"/>
          <VariableType>4 Bytes</VariableType>
          <Address>05302538</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(cJmpIfEnoughBalanceToBuyAOB,ItemStoreItem:Buy,ItemStoreItem:Buy+b67,48 ** ** ** ** ** ** 3B C1 0F 8D)
registersymbol(cJmpIfEnoughBalanceToBuyAOB)

cJmpIfEnoughBalanceToBuyAOB+9: //ItemStoreItem:Buy+88:
db 90 E9


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
cJmpIfEnoughBalanceToBuyAOB+9: //ItemStoreItem:Buy+88:
db 0F 8D
//Alt: jnl
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(balanceWriteOnWalletWithdrawAOB,Wallet:Withdraw,Wallet:Withdraw+4b,48 ** ** ** 2B C6 85 C0)
registersymbol(balanceWriteOnWalletWithdrawAOB)

alloc(newmem,2048,balanceWriteOnWalletWithdrawAOB) //Wallet:Withdraw+c)
label(returnhere)
label(originalcode_ignorebalance)
registersymbol(originalcode_ignorebalance)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(balanceWriteOnWalletWithdrawAOB,6)
//movsxd rax,dword ptr [rdi+28]
//sub eax,esi
jns @f
xor eax,eax
db 89 77
readmem(balanceWriteOnWalletWithdrawAOB+3,1)
//mov [rdi+28],esi

@@:
jmp exit

originalcode_ignorebalance:
readmem(balanceWriteOnWalletWithdrawAOB,6)
//movsxd  rax,dword ptr [rdi+28]
//sub eax,esi

exit:
jmp returnhere

///

balanceWriteOnWalletWithdrawAOB: //Wallet:Withdraw+c:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
balanceWriteOnWalletWithdrawAOB: //Wallet:Withdraw+c:
readmem(originalcode_ignorebalance,6)
//db 48 63 47 28 2B C6
//Alt: movsxd  rax,dword ptr [rdi+28]
//Alt: sub eax,esi
unregistersymbol(originalcode_ignorebalance)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(walletBaseReadForGameUIUpdateAOB,GameUI:Update,GameUI:Update+235,48 ** ** ** ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
registersymbol(walletBaseReadForGameUIUpdateAOB)

label(pWallet)
registersymbol(pWallet)

alloc(newmem6,2048,walletBaseReadForGameUIUpdateAOB+8) //GameUI:Update+160)
label(returnhere6)
label(originalcode6_enable)
registersymbol(originalcode6_enable)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov r11,pWallet
mov [r11],rcx

originalcode6_enable:
readmem(walletBaseReadForGameUIUpdateAOB+8,8)
//add rcx,28
//sub rsp,20

exit6:
jmp returnhere6

///
pWallet:
///

walletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+160:
jmp newmem6
nop
nop
nop
returnhere6:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
walletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+160:
readmem(originalcode6_enable,8)
//db 48 83 C1 28 48 83 EC 20
//Alt: add rcx,28
//Alt: sub rsp,20
unregistersymbol(originalcode6_enable)

unregistersymbol(pWallet)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>51</ID>
          <Description>"No description"</Description>
          <LastState Value="44091926" RealAddress="02363CB8"/>
          <VariableType>4 Bytes</VariableType>
          <Address>02363CB8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"No description"</Description>
          <LastState Value="44288534" RealAddress="02363CBC"/>
          <VariableType>4 Bytes</VariableType>
          <Address>02363CBC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>076A2440</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>2B798E08</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"isUnlocked"</Description>
          <VariableType>Byte</VariableType>
          <Address>2B7F91A8</Address>
          <Offsets>
            <Offset>5C</Offset>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>60</ID>
          <Description>"signatureUnlocked"</Description>
          <VariableType>Byte</VariableType>
          <Address>2B7F91A8</Address>
          <Offsets>
            <Offset>5E</Offset>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"&lt;SkillExecuted&gt;k__BackingField"</Description>
          <VariableType>Byte</VariableType>
          <Address>2B7F91A8</Address>
          <Offsets>
            <Offset>A3</Offset>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"fu1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
SpellBookUI:LoadEleSkillDict+71a:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SpellBookUI:LoadEleSkillDict+71a:
db 75
//Alt: jne
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"fu2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
SpellBookUI:LoadInfoSkills+21c:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SpellBookUI:LoadInfoSkills+21c:
db 74 2B
//Alt: je SpellBookUI:LoadInfoSkills+249
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"fu3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
SpellBookUI:LoadInfoSkills+32d:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SpellBookUI:LoadInfoSkills+32d:
db 74 2C
//Alt: je SpellBookUI:LoadInfoSkills+35b
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>65</ID>
          <Description>"fu4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
SpellBookUI:LoadInfoSkills+43b:
db 90 90 90 90 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SpellBookUI:LoadInfoSkills+43b:
db 0F 84 3A 00 00 00
//Alt: je SpellBookUI:LoadInfoSkills+47b
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>66</ID>
          <Description>"fu5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
SpellBookUI:LoadInfoSkills+55b:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SpellBookUI:LoadInfoSkills+55b:
db 74 32
//Alt: je SpellBookUI:LoadInfoSkills+58f
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"au"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,SpellBookUI:LoadEleSkillDict+713) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [r14+5c],1

originalcode:
movzx eax,byte ptr [r14+5C]

exit:
jmp returnhere

///

SpellBookUI:LoadEleSkillDict+713:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
SpellBookUI:LoadEleSkillDict+713:
db 41 0F B6 46 5C
//Alt: movzx eax,byte ptr [r14+5C]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"isUltimate"</Description>
          <VariableType>Byte</VariableType>
          <Address>2B7F91A8</Address>
          <Offsets>
            <Offset>64</Offset>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>69</ID>
          <Description>"isUltimate"</Description>
          <LastState Value="0" RealAddress="35A053E4"/>
          <VariableType>Byte</VariableType>
          <Address>35A053E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,CooldownEntry:EntryUpdate+e3) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,1

originalcode:
add rsp,20
mov r8,rax

exit:
jmp returnhere

///

CooldownEntry:EntryUpdate+e3:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
CooldownEntry:EntryUpdate+e3:
db 48 83 C4 20 4C 8B C0
//Alt: add rsp,20
//Alt: mov r8,rax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"isUltimate"</Description>
          <LastState Value="0" RealAddress="35B78684"/>
          <VariableType>Byte</VariableType>
          <Address>35B78684</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>74</ID>
          <Description>"isUltimate"</Description>
          <LastState Value="211" RealAddress="310BB064"/>
          <VariableType>Byte</VariableType>
          <Address>310BB064</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>75</ID>
          <Description>"currentLevel"</Description>
          <LastState Value="4257807816" RealAddress="310BB060"/>
          <VariableType>4 Bytes</VariableType>
          <Address>310BB060</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>76</ID>
          <Description>"element"</Description>
          <LastState Value="4218026857" RealAddress="310BB058"/>
          <VariableType>4 Bytes</VariableType>
          <Address>310BB058</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>77</ID>
          <Description>"skillSlot"</Description>
          <LastState Value="129959871" RealAddress="310BB094"/>
          <VariableType>4 Bytes</VariableType>
          <Address>310BB094</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>78</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

[CooldownUI:AssignSkillEvent+a8]:
cSkillStateGetIsEmpowered:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>70</ID>
              <Description>"0"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,cSkillStateGetIsEmpowered+26)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov rax,1
cmp [rsp+38],f215f73
je @f
add rsp,20
leave
jmp exit

originalcode:
add rsp,20
leave 

exit:
jmp returnhere

///

cSkillStateGetIsEmpowered+26:
jmp newmem
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
cSkillStateGetIsEmpowered+26:
db 48 83 C4 20 C9
//Alt: add rsp,20
//Alt: leave
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>80</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,0DE87B80) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,1
ret

originalcode:
push rbp
mov rbp,rsp
sub rsp,10

exit:
jmp returnhere

///

0DE87B80:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
0DE87B80:
db 55 48 8B EC 48 83 EC 10
//Alt: push rbp
//Alt: mov rbp,rsp
//Alt: sub rsp,10
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"No description"</Description>
          <LastState Value="00000000000023E1" RealAddress="0DE87B80"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>0DE87B80</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>82</ID>
              <Description>"No description"</Description>
              <LastState Value="0C93DE38" RealAddress="0DE87B88"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>+8</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>83</ID>
          <Description>"No description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>0D080000</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>84</ID>
              <Description>"No description"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>+8</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>79</ID>
          <Description>"Enhanced Magic .1"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(skillIsEmpoweredChkForDisplayAOB,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 4C 8B C0)
registersymbol(skillIsEmpoweredChkForDisplayAOB)

alloc(newmem,2048,skillIsEmpoweredChkForDisplayAOB+d) //CooldownEntry:EntryUpdate+e3)
label(returnhere)
label(originalcode_empowerskill)
registersymbol(originalcode_empowerskill)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[rsi+40]
mov rax,[rax+38]
mov byte ptr [rax+28],1
movzx rax,byte ptr [rax+28]

originalcode_empowerskill:
readmem(skillIsEmpoweredChkForDisplayAOB+d,7)
//add rsp,20
//mov r8,rax

exit:
jmp returnhere

///

skillIsEmpoweredChkForDisplayAOB+d: //CooldownEntry:EntryUpdate+e3:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
skillIsEmpoweredChkForDisplayAOB+d: //CooldownEntry:EntryUpdate+e3:
readmem(originalcode_empowerskill,7)
//db 48 83 C4 20 4C 8B C0
//Alt: add rsp,20
//Alt: mov r8,rax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>85</ID>
          <Description>"Enhanced Magic .2"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(skillIsEmpoweredChkForDisplay2AOB,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 4C 8B C0)
registersymbol(skillIsEmpoweredChkForDisplay2AOB)

label(bEnhancedMagicScriptState)
registersymbol(bEnhancedMagicScriptState)
label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

alloc(newmem,2048,skillIsEmpoweredChkForDisplay2AOB+a) //CooldownEntry:EntryUpdate+e0)
label(returnhere)
label(originalcode_empowerskill2)
registersymbol(originalcode_empowerskill2)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfq
push rax

mov rax,cSkillStateGetIsEmpowered
mov rax,[rax]
test rax,rax
jnz @f

cmp byte ptr [r11],E8
je end
cmp byte ptr [r11],55
jne end
mov rax,cSkillStateGetIsEmpowered
mov [rax],r11

push [r11]
pop [rax+8]
push [r11+8]
pop [rax+10]

mov rax,000000000001B848
mov [r11],rax
mov eax,55C30000
mov [r11+8],eax
//48 B8 0100000000000000 - mov rax,0000000000000001 { 1 }
//C3                     - ret
//90                     - nop
jmp end

@@:
mov rax,bEnhancedMagicScriptState
cmp byte ptr [rax],1
jl end

mov rax,cSkillStateGetIsEmpowered
push [rax+8]
pop [r11]
push [rax+10]
pop [r11+8]
//mov rax,10EC8348EC8B4855
//mov [r11],rax
//mov eax,F84D8948
//mov [r11+8],eax
//55                    - push rbp
//48 8B EC              - mov rbp,rsp
//48 83 EC 10           - sub rsp,10
//48 89 4D F8           - mov [rbp-08],rcx

mov rax,bEnhancedMagicScriptState
mov byte ptr [rax],2

end:
pop rax
popfq

originalcode_empowerskill2:
readmem(skillIsEmpoweredChkForDisplay2AOB+a,7)
//call r11
//add rsp,20

exit:
jmp returnhere

///
bEnhancedMagicScriptState:
dd 0
cSkillStateGetIsEmpowered:
dq 0
///

skillIsEmpoweredChkForDisplay2AOB+a: //CooldownEntry:EntryUpdate+e0:
jmp newmem
nop
nop
returnhere:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//modified from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEnhancedMagicScriptState" ) == 0 then --could be 2 already
  writeInteger( "bEnhancedMagicScriptState", 1 ) --tell the script to restore the codes
end

if readInteger( "cSkillStateGetIsEmpowered" ) == 0 then --if the injection point isn't even jit yet
  writeInteger( "bEnhancedMagicScriptState", 2 ) --let the script to deactivate
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEnhancedMagicScriptState" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the script failed!\nLoad a savegame first.' )
  error( 'Script disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//cSkillStateGetIsEmpowered:
//dd 1

///*****************************************///
dealloc(newmem)
skillIsEmpoweredChkForDisplay2AOB+a: //CooldownEntry:EntryUpdate+e0:
readmem(originalcode_empowerskill2,7)
//db 41 FF D3 48 83 C4 20
//Alt: call r11
//Alt: add rsp,20
unregistersymbol(originalcode_empowerskill2)

unregistersymbol(bEnhancedMagicScriptState)
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>87</ID>
          <Description>"Item[4]"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>308585B0</Address>
          <Offsets>
            <Offset>30</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"No description"</Description>
          <LastState Value="4010471178" RealAddress="307AA8C0"/>
          <VariableType>4 Bytes</VariableType>
          <Address>307AA8C0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"skillData"</Description>
          <LastState Value="FAD3FAD3FE7BFE7B" RealAddress="307AA8F0"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>307AA8F0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"Item[2]"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>308585B0</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"mk .1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,Player:HandleSkills+33) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx //skill 1
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element


mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]


isbasicskill:
test rcx,rcx
jnz isdashskill
mov rsi,[rax+rcx*8+20]
movzx r9,word ptr [rsi+58]
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
mov r9,1

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
jmp end

isdashskill:




end:
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rbx

originalcode:
lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

Player:HandleSkills+33:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Player:HandleSkills+33:
db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"mk .2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bMagicChangeModKey)
registersymbol(bMagicChangeModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)

alloc(newmem,2048,Player:HandleSkills+33) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx //skill 1
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

chkmagic2changekey:

jmp end

isbasicskill:
test rcx,rcx
jnz isdashskill
mov rsi,[rax+rcx*8+20]
movzx r9,word ptr [rsi+58]
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
mov r9,1

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
jmp end

isdashskill:




end:
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rbx

originalcode:
lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
bMagicChangeModKey:
dd 0
bMagic1ChangeKey:
dd 0
///

Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,10 //SHIFT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
dealloc(newmem)
Player:HandleSkills+33:
db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]

unregistersymbol(bMagicChangeModKey)
unregistersymbol(bMagic1ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"Item[2]"</Description>
          <LastState Value="0000000012900050" RealAddress="12B785A8"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>12B785B0</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"Magic Change Key .4 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeModKey)
registersymbol(bMagicChangeModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx //skillstate slot 1
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:

jmp end

isbasicskill:

@@:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
jmp end

isdashskill:

@@:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
jmp end



end:
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rbx

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
bMagicChangeModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,10 //SHIFT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>99</ID>
              <Description>"(Shift)1"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>95</ID>
          <Description>"Magic Change Key .3 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeModKey)
registersymbol(bMagicChangeModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx //skillstate slot 1
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

chkmagic2changekey:

jmp end

isbasicskill:
test rcx,rcx
jnz isdashskill
mov rsi,[rax+rcx*8+20]
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

@@:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
jmp end

isdashskill:




end:
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rbx

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
bMagicChangeModKey:
dd 0
bMagic1ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,10 //SHIFT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeModKey)
unregistersymbol(bMagic1ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>96</ID>
              <Description>"(Shift)1"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"isSignature"</Description>
          <VariableType>Byte</VariableType>
          <Address>364F5DB0</Address>
          <Offsets>
            <Offset>5F</Offset>
            <Offset>38</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
Player:GetSignatureSkill+6d:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Player:GetSignatureSkill+6d:
db 74 1D
//Alt: je Player:GetSignatureSkill+8c
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"Magic Change Key .9 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeElementModKey)
registersymbol(bMagicChangeElementModKey)
label(bMagicChangeSubCatModKey)
registersymbol(bMagicChangeSubCatModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeElementModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:
cmp byte ptr [rdx+8],1
je @f
mov byte ptr [rdx+9],0
jmp chkmagic4changekey

@@:
cmp rcx,2
jne end
cmp byte ptr [rdx+9],1
je chkmagic4changekey
mov byte ptr [rdx+9],1
jmp isstandardskill

//
chkmagic4changekey:
cmp byte ptr [rdx+c],1
je @f
mov byte ptr [rdx+d],0
jmp chkmagic5changekey

@@:
cmp rcx,3
jne end
cmp byte ptr [rdx+d],1
je chkmagic5changekey
mov byte ptr [rdx+d],1
jmp issignatureskill

//
chkmagic5changekey:

jmp end

/////
//*
isbasicskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isdashskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isstandardskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextstandardskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextstandardskillloop
cmp byte ptr [rdi+66],1
je findnextstandardskillloop
cmp byte ptr [rdi+67],1
je findnextstandardskillloop
cmp byte ptr [rdi+5f],1
je findnextstandardskillloop
cmp [rdi+58],r9d
jne findnextstandardskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextstandardskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
issignatureskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextsignatureskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextsignatureskillloop
cmp byte ptr [rdi+66],1
je findnextsignatureskillloop
cmp byte ptr [rdi+67],1
je findnextsignatureskillloop
//cmp byte ptr [rdi+5f],0
//je findnextsignatureskillloop
cmp [rdi+58],r9d
jne findnextsignatureskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextsignatureskillloop
@@:
cmp byte ptr [rdi+5d],1
jne findnextsignatureskillloop
//mov byte ptr [rdi+5f],1

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end



end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c0]
test rsi,rsi
jz @f
mov rax,[rsi+18]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeElementModKey:
dd 0
bMagicChangeSubCatModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeElementModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

sub rsp,10

mov dword ptr [rsp],68 //movement skill
mov rcx,60 //Numeric keypad 0 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6a //projectile skill
mov rcx,61 //Numeric keypad 1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6b //wave skill
mov rcx,62 //Numeric keypad 2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6c //buff skill
mov rcx,63 //Numeric keypad 3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6d //summon skill
mov rcx,64 //Numeric keypad 4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6e //ward skill
mov rcx,65 //Numeric keypad 5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
xor dx,dx
mov [rcx+2],dx

subcatmodkeychkend:
add rsp,10

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeElementModKey)
unregistersymbol(bMagicChangeSubCatModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>111</ID>
              <Description>"(Alt)1,2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>106</ID>
          <Description>"Magic Change Key .8 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeElementModKey)
registersymbol(bMagicChangeElementModKey)
label(bMagicChangeSubCatModKey)
registersymbol(bMagicChangeSubCatModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeElementModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:
cmp byte ptr [rdx+8],1
je @f
mov byte ptr [rdx+9],0
jmp chkmagic4changekey

@@:
cmp rcx,2
jne end
cmp byte ptr [rdx+9],1
je chkmagic4changekey
mov byte ptr [rdx+9],1
jmp isstandardskill

//
chkmagic4changekey:

jmp end

/////
//*
isbasicskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isdashskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isstandardskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextstandardskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextstandardskillloop
cmp byte ptr [rdi+66],1
je findnextstandardskillloop
cmp byte ptr [rdi+67],1
je findnextstandardskillloop
cmp byte ptr [rdi+5f],1
je findnextstandardskillloop
cmp [rdi+58],r9d
jne findnextstandardskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextstandardskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end



end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c0]
test rsi,rsi
jz @f
mov rax,[rsi+18]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeElementModKey:
dd 0
bMagicChangeSubCatModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeElementModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

sub rsp,10

mov dword ptr [rsp],68 //movement skill
mov rcx,60 //Numeric keypad 0 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6a //projectile skill
mov rcx,61 //Numeric keypad 1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6b //wave skill
mov rcx,62 //Numeric keypad 2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6c //buff skill
mov rcx,63 //Numeric keypad 3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6d //summon skill
mov rcx,64 //Numeric keypad 4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6e //ward skill
mov rcx,65 //Numeric keypad 5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
xor dx,dx
mov [rcx+2],dx

subcatmodkeychkend:
add rsp,10

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeElementModKey)
unregistersymbol(bMagicChangeSubCatModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>107</ID>
              <Description>"(Alt)1,2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Magic Change Key .7 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeElementModKey)
registersymbol(bMagicChangeElementModKey)
label(bMagicChangeSubCatModKey)
registersymbol(bMagicChangeSubCatModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeElementModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:
cmp byte ptr [rdx+8],1
je @f
mov byte ptr [rdx+9],0
jmp chkmagic4changekey

@@:
cmp rcx,2
jne end
cmp byte ptr [rdx+9],1
je chkmagic4changekey
mov byte ptr [rdx+9],1
jmp isstandardskill

//
chkmagic4changekey:

jmp end

/////
//*
isbasicskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isdashskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isstandardskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextstandardskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextstandardskillloop
cmp byte ptr [rdi+66],1
je findnextstandardskillloop
cmp byte ptr [rdi+67],1
je findnextstandardskillloop
cmp byte ptr [rdi+5f],1
je findnextstandardskillloop
cmp [rdi+58],r9d
jne findnextstandardskillloop
mov r10,bMagicChangeSubCatModKey
mov r10,[r10]
test r10l,r10l
jz @f
shr r10,10
cmp byte ptr [rdi+r10],1
jne findnextstandardskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end



end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c0]
test rsi,rsi
jz @f
mov rax,[rsi+18]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeElementModKey:
dd 0
bMagicChangeSubCatModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeElementModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

sub rsp,10

mov dword ptr [rsp],68 //movement skill
mov rcx,60 //Numeric keypad 0 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6a //projectile skill
mov rcx,61 //Numeric keypad 1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6b //wave skill
mov rcx,62 //Numeric keypad 2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6c //buff skill
mov rcx,63 //Numeric keypad 3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6d //summon skill
mov rcx,64 //Numeric keypad 4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
mov dword ptr [rsp],6e //ward skill
mov rcx,65 //Numeric keypad 5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeSubCatModKey
mov [rcx],al
cmp al,1
jne @f
mov edx,[rsp]
mov [rcx+2],dx
jmp subcatmodkeychkend

@@:
xor dx,dx
mov [rcx+2],dx

subcatmodkeychkend:
add rsp,10

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeElementModKey)
unregistersymbol(bMagicChangeSubCatModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>105</ID>
              <Description>"(Alt)1,2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"Magic Change Key .6 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeModKey)
registersymbol(bMagicChangeModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:
cmp byte ptr [rdx+8],1
je @f
mov byte ptr [rdx+9],0
jmp chkmagic4changekey

@@:
cmp rcx,2
jne end
cmp byte ptr [rdx+9],1
je chkmagic4changekey
mov byte ptr [rdx+9],1
jmp isstandardskill

//
chkmagic4changekey:

jmp end

/////
//*
isbasicskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isdashskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

//*
isstandardskill:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextstandardskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextstandardskillloop
cmp byte ptr [rdi+66],1
je findnextstandardskillloop
cmp byte ptr [rdi+67],1
je findnextstandardskillloop
cmp byte ptr [rdi+5f],1
je findnextstandardskillloop
cmp [rdi+58],r9d
jne findnextstandardskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end



end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c0]
test rsi,rsi
jz @f
mov rax,[rsi+18]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>103</ID>
              <Description>"(Alt)1,2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"Magic Change Key .5 (BETA)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(CooldownUI_RefreshEntriesAOB)
registersymbol(CooldownUI_RefreshEntriesAOB)

CooldownUI:RefreshEntries:
CooldownUI_RefreshEntriesAOB:

aobscanregion(assignSkillSlotsReadAOB,Player:HandleSkills,Player:HandleSkills+eb,48 ** ** ** ** 48 ** ** 48 85 C0 0F 84)
registersymbol(assignSkillSlotsReadAOB)

label(bMagicChangeModKey)
registersymbol(bMagicChangeModKey)
label(bMagic1ChangeKey)
registersymbol(bMagic1ChangeKey)
label(bMagic2ChangeKey)
registersymbol(bMagic2ChangeKey)
label(bMagic3ChangeKey)
registersymbol(bMagic3ChangeKey)
label(bMagic4ChangeKey)
registersymbol(bMagic4ChangeKey)
label(bMagic5ChangeKey)
registersymbol(bMagic5ChangeKey)
label(bMagic6ChangeKey)
registersymbol(bMagic6ChangeKey)

alloc(newmem,2048,assignSkillSlotsReadAOB) //Player:HandleSkills+33)
label(returnhere)
label(originalcode_magicchangekey)
registersymbol(originalcode_magicchangekey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx //skillstate slot 1
push rcx
push rdx
push rsi //current skill
push rdi
push r8  //current skill "id"
push r9  //current element
push r10
push r11
push r15

mov rbx,pPlayer
mov rbx,[rbx]
test rbx,rbx
jz end
mov rbx,[rbx+1a8]
test rbx,rbx
jz end
lea rbx,[rbx+20]

mov rsi,[rax+rcx*8+20]
test rsi,rsi
jnz @f
xor r9,r9
jmp chkmagic1changekey
@@:
movzx r9,word ptr [rsi+58]
mov rdx,bMagicChangeModKey
cmp byte ptr [rdx],1
jne @f
mov r8,6
inc r9
cmp r9,5
cmove r9,r8
cmp r9,6
jle @f
xor r9,r9

//
chkmagic1changekey:
mov rdx,bMagic1ChangeKey
cmp byte ptr [rdx],1
je @f
mov byte ptr [rdx+1],0
jmp chkmagic2changekey

@@:
test rcx,rcx
jnz end
cmp byte ptr [rdx+1],1
je chkmagic2changekey
mov byte ptr [rdx+1],1
jmp isbasicskill

//
chkmagic2changekey:
cmp byte ptr [rdx+4],1
je @f
mov byte ptr [rdx+5],0
jmp chkmagic3changekey

@@:
cmp rcx,1
jne end
cmp byte ptr [rdx+5],1
je chkmagic3changekey
mov byte ptr [rdx+5],1
jmp isdashskill

//
chkmagic3changekey:

jmp end

isbasicskill:

@@:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextbasicskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextbasicskillloop
cmp byte ptr [rdi+66],1
jne findnextbasicskillloop
cmp [rdi+58],r9d
jne findnextbasicskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end

isdashskill:

@@:
xor rdx,rdx
@@:
cmp [rbx+rdx*8],rsi
je @f
inc rdx
cmp edx,[rbx-8]
jle @b
xor rdx,rdx
xor r9,r9

@@:
mov r8,rdx
findnextdashskillloop:
inc r8
cmp r8,[rbx-8]
jle @f
xor r8,r8
@@:
cmp r8,rdx
je end
mov rdi,[rbx+r8*8]
test rdi,rdi
jz findnextdashskillloop
cmp byte ptr [rdi+67],1
jne findnextdashskillloop
cmp [rdi+58],r9d
jne findnextdashskillloop

@@:
mov [rax+rcx*8+20],rdi
call cCustomLowerHudRefresh
jmp end



end:
pop r15
pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

originalcode_magicchangekey:
readmem(assignSkillSlotsReadAOB,5)
//lea rax,[rax+rcx*8+20]

exit:
jmp returnhere

///
cCustomLowerHudRefresh:
mov rsi,pPlayer
mov rsi,[rsi]
test rsi,rsi
jz @f
mov rsi,[rsi+1c0]
test rsi,rsi
jz @f
mov rax,[rsi+18]
mov rcx,rax
sub rsp,20
cmp dword ptr [rax],00
mov r11,CooldownUI_RefreshEntriesAOB //CooldownUI:RefreshEntries
call r11
add rsp,20
@@:
ret

///

///
bMagicChangeModKey:
dd 0
bMagic1ChangeKey:
dd 0
bMagic2ChangeKey:
dd 0
bMagic3ChangeKey:
dd 0
bMagic4ChangeKey:
dd 0
bMagic5ChangeKey:
dd 0
bMagic6ChangeKey:
dd 0
///

assignSkillSlotsReadAOB: //Player:HandleSkills+33:
jmp newmem
returnhere:

///*****************************************///
label(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)
registersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

alloc(WizardOfLegend_MagicChangekeylistener_mem,2048,"WizardOfLegend.exe")
registersymbol(WizardOfLegend_MagicChangekeylistener_mem)
createthread(WizardOfLegend_MagicChangekeylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

WizardOfLegend_MagicChangekeylistener_mem:
sub rsp,28
push rax

keylistenerstart:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagicChangeModKey
mov [rcx],al

mov rcx,31 //1 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic1ChangeKey
mov [rcx],al

mov rcx,32 //2 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic2ChangeKey
mov [rcx],al

mov rcx,33 //3 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic3ChangeKey
mov [rcx],al

mov rcx,34 //4 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic4ChangeKey
mov [rcx],al

mov rcx,35 //5 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic5ChangeKey
mov [rcx],al

mov rcx,36 //6 key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
mov rcx,bMagic6ChangeKey
mov [rcx],al

keylistenerend:
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],1
jne keylistenerstart

keylistenerexit:
pop rax
add rsp,28
mov dword ptr [bEndThread_WizardOfLegend_MagicChangekeylistener_mem],2
ret

///
bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_WizardOfLegend_MagicChangekeylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_WizardOfLegend_MagicChangekeylistener_mem:
//dd 1

///*****************************************///
unregistersymbol(CooldownUI_RefreshEntriesAOB)

dealloc(newmem)
assignSkillSlotsReadAOB: //Player:HandleSkills+33:
readmem(originalcode_magicchangekey,5)
//db 48 8D 44 C8 20
//Alt: lea rax,[rax+rcx*8+20]
unregistersymbol(originalcode_magicchangekey)

unregistersymbol(bMagicChangeModKey)
unregistersymbol(bMagic1ChangeKey)
unregistersymbol(bMagic2ChangeKey)
unregistersymbol(bMagic3ChangeKey)
unregistersymbol(bMagic4ChangeKey)
unregistersymbol(bMagic5ChangeKey)
unregistersymbol(bMagic6ChangeKey)

///*****************************************///
unregistersymbol(bEndThread_WizardOfLegend_MagicChangekeylistener_mem)

dealloc(WizardOfLegend_MagicChangekeylistener_mem)
unregistersymbol(WizardOfLegend_MagicChangekeylistener_mem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>101</ID>
              <Description>"(Alt)1,2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>119</ID>
          <Description>"Enable .1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
LaunchMonoDataCollector()
{$asm}

label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,Player:Update)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbp
mov rbp,rsp
push rsi
mov rsi,pPlayer
mov [rsi],rcx

originalcode:
//push rbp
//mov rbp,rsp
//push rsi

exit:
jmp returnhere

///
pPlayer:
///

Player:Update:
jmp newmem
returnhere:

///*********************************************///
label(pPlayerStatusBar)
registersymbol(pPlayerStatusBar)
alloc(newmem2,2048,PlayerStatusBar:Update+5)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rsi,pPlayer
mov rsi,[rsi]
cmp [rcx+18],rsi
jne @f
mov rsi,pPlayerStatusBar
mov [rsi],rcx

originalcode2:
sub rsp,08
mov rsi,rcx

exit2:
jmp returnhere2

///
pPlayerStatusBar:
///

PlayerStatusBar:Update+5:
jmp newmem2
nop
nop
returnhere2:

///*********************************************///
aobscanregion(gemWalletBaseReadForGameUIUpdateAOB,GameUI:Update,GameUI:Update+235,48 ** ** ** ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48)
registersymbol(gemWalletBaseReadForGameUIUpdateAOB)

label(pPlatWallet)
registersymbol(pPlatWallet)

alloc(newmem6,2048,gemWalletBaseReadForGameUIUpdateAOB+8) //GameUI:Update+160)
label(returnhere6)
label(originalcode6_enable)
registersymbol(originalcode6_enable)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov r11,pPlatWallet
mov [r11],rcx

originalcode6_enable:
readmem(gemWalletBaseReadForGameUIUpdateAOB+8,8)
//add rcx,28
//sub rsp,20

exit6:
jmp returnhere6

///
pPlatWallet:
///

gemWalletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+160:
jmp newmem6
nop
nop
nop
returnhere6:

///*********************************************///
aobscanregion(goldWalletBaseReadForGameUIUpdateAOB,GameUI:Update,GameUI:Update+235,48 ** ** ** ** ** ** ** 48 ** ** ** 48 ** ** ** 49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** 48 ** ** ** 48 ** ** ** ** ** ** ** ** ** ** ** 48 ** ** ** E9)
registersymbol(goldWalletBaseReadForGameUIUpdateAOB)

label(pGoldWallet)
registersymbol(pGoldWallet)

alloc(newmem11,2048,goldWalletBaseReadForGameUIUpdateAOB+8) //GameUI:Update+1ab)
label(returnhere11)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov r11,pGoldWallet
mov [r11],rcx

originalcode11_enable:
readmem(goldWalletBaseReadForGameUIUpdateAOB+8,8)
//add rcx,28
//sub rsp,20

exit11:
jmp returnhere11

///
pGoldWallet:
///

goldWalletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+1ab:
jmp newmem11
nop
nop
nop
returnhere11:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Player:Update:
db 55 48 8B EC 56
//Alt: push rbp
//Alt: mov rbp,rsp
//Alt: push rsi

unregistersymbol(pPlayer)

///*********************************************///
dealloc(newmem2)
PlayerStatusBar:Update+5:
db 48 83 EC 08 48 8B F1
//Alt: sub rsp,08
//Alt: mov rsi,rcx

unregistersymbol(pPlayerStatusBar)

///*********************************************///
dealloc(newmem6)
gemWalletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+160:
readmem(originalcode6_enable,8)
//db 48 83 C1 28 48 83 EC 20
//Alt: add rcx,28
//Alt: sub rsp,20
unregistersymbol(originalcode6_enable)

unregistersymbol(pPlatWallet)

///*********************************************///
dealloc(newmem11)
goldWalletBaseReadForGameUIUpdateAOB+8: //GameUI:Update+1ab:
readmem(originalcode11_enable,8)
//db 48 83 C1 28 48 83 EC 20
//Alt: add rcx,28
//Alt: sub rsp,20
unregistersymbol(originalcode11_enable)

unregistersymbol(pGoldWallet)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>122</ID>
          <Description>"Enhanced Magic .3"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(skillIsEmpoweredChkForDisplayAOB,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,49 ** ** ** ** ** ** ** ** ** 41 FF D3 48 ** ** ** 4C 8B C0)
registersymbol(skillIsEmpoweredChkForDisplayAOB)

label(bEnhancedMagicScriptState)
registersymbol(bEnhancedMagicScriptState)
label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

alloc(newmem,2048,skillIsEmpoweredChkForDisplayAOB+d) //CooldownEntry:EntryUpdate+e3)
label(returnhere)
label(originalcode_empowerskill)
registersymbol(originalcode_empowerskill)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,1
push rax

mov rax,cSkillStateGetIsEmpowered
mov rax,[rax]
test rax,rax
jnz @f

//readmem(skillIsEmpoweredChkForDisplayAOB,10)

cmp byte ptr [r11],E8  //chk if SkillState:get_IsEmpowered is jit yet.
je end
cmp byte ptr [r11],55
jne end
mov rax,cSkillStateGetIsEmpowered
mov [rax],r11

push [r11]
pop [rax+8]
push [r11+8]
pop [rax+10]

mov rax,000000000001B848
mov [r11],rax
mov eax,90C30000
mov [r11+8],eax
//48 B8 0100000000000000 - mov rax,0000000000000001 { 1 }
//C3                     - ret
//90                     - nop
jmp end

@@:
mov rax,bEnhancedMagicScriptState
cmp byte ptr [rax],1
jl end

mov rax,cSkillStateGetIsEmpowered
push [rax+8]
pop [r11]
push [rax+10]
pop [r11+8]
//mov rax,10EC8348EC8B4855
//mov [r11],rax
//mov eax,F84D8948
//mov [r11+8],eax
//55                    - push rbp
//48 8B EC              - mov rbp,rsp
//48 83 EC 10           - sub rsp,10
//48 89 4D F8           - mov [rbp-08],rcx

mov rax,bEnhancedMagicScriptState
mov byte ptr [rax],2

end:
pop rax

originalcode_empowerskill:
readmem(skillIsEmpoweredChkForDisplayAOB+d,7)
//add rsp,20
//mov r8,rax

exit:
jmp returnhere

///
bEnhancedMagicScriptState:
dd 0
cSkillStateGetIsEmpowered:
dq 0
///

skillIsEmpoweredChkForDisplayAOB+d: //CooldownEntry:EntryUpdate+e3:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//modified from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEnhancedMagicScriptState" ) == 0 then --could be 2 already
  writeInteger( "bEnhancedMagicScriptState", 1 ) --tell the script to restore the codes
end

if readInteger( "cSkillStateGetIsEmpowered" ) == 0 then --if the injection point isn't even jit yet
  writeInteger( "bEnhancedMagicScriptState", 2 ) --let the script to deactivate
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEnhancedMagicScriptState" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the script failed!\nHa' )
  error( 'Script disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//cSkillStateGetIsEmpowered:
//dd 1

///*****************************************///
dealloc(newmem)
skillIsEmpoweredChkForDisplayAOB+d: //CooldownEntry:EntryUpdate+e3:
readmem(originalcode_empowerskill,7)
//db 48 83 C4 20 4C 8B C0
//Alt: add rsp,20
//Alt: mov r8,rax

unregistersymbol(bEnhancedMagicScriptState)
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
LaunchMonoDataCollector()
{$asm}

label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

SkillState:get_IsEmpowered:
cSkillStateGetIsEmpowered:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>121</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanregion(skillIsEmpoweredChkForDisplayAOB,CooldownEntry:EntryUpdate,CooldownEntry:EntryUpdate+141,48 83 EC 20 48 8B ** ** ** ** ** ** ** ** ** ** 48 83 C4 20 4C 8B C0)
registersymbol(skillIsEmpoweredChkForDisplayAOB)

label(bEnhancedMagicScriptState)
registersymbol(bEnhancedMagicScriptState)
label(cSkillStateGetIsEmpowered)
registersymbol(cSkillStateGetIsEmpowered)

alloc(newmem,2048,skillIsEmpoweredChkForDisplayAOB) //CooldownEntry:EntryUpdate+cf)
label(returnhere)
label(originalcode_skillIsEmpoweredChkForDisplayAOB)
registersymbol(originalcode_skillIsEmpoweredChkForDisplayAOB)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx
push rax

readmem(originalcode_skillIsEmpoweredChkForDisplayAOB+4,3)
//mov rax,[rax]
mov rax,[rax+120]

mov rbx,cSkillStateGetIsEmpowered
mov rbx,[rbx]
test rbx,rbx
jnz @f

cmp byte ptr [rax],E8  //chk if SkillState:get_IsEmpowered is jit yet.
je end
cmp byte ptr [rax],55
jne end
mov rbx,cSkillStateGetIsEmpowered
mov [rbx],rax

push [rax]
pop [rbx+8]
push [rax+8]
pop [rbx+10]

mov rbx,000000000001B848
mov [rax],rbx
mov ebx,90C30000
mov [rax+8],ebx
//48 B8 0100000000000000 - mov rax,0000000000000001 { 1 }
//C3                     - ret
//90                     - nop
jmp end

@@:
mov rbx,bEnhancedMagicScriptState
cmp byte ptr [rbx],1
jl end

mov rbx,cSkillStateGetIsEmpowered
push [rbx+8]
pop [rax]
push [rbx+10]
pop [rax+8]
//mov rbx,10EC8348EC8B4855
//mov [rax],rbx
//mov ebx,F84D8948
//mov [rax+8],ebx
//55                    - push rbp
//48 8B EC              - mov rbp,rsp
//48 83 EC 10           - sub rsp,10
//48 89 4D F8

mov rbx,bEnhancedMagicScriptState
mov byte ptr [rbx],2

end:
pop rax
pop rbx

originalcode_skillIsEmpoweredChkForDisplayAOB:
readmem(skillIsEmpoweredChkForDisplayAOB,7)
//sub rsp,20
//mov rax,[rax]

exit:
jmp returnhere

///
bEnhancedMagicScriptState:
dd 0
cSkillStateGetIsEmpowered:
dq 0
///

skillIsEmpoweredChkForDisplayAOB: //CooldownEntry:EntryUpdate+cf:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//modified from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEnhancedMagicScriptState" ) == 0 then --could be 2 already
  writeInteger( "bEnhancedMagicScriptState", 1 ) --tell the script to restore the codes
end

if readInteger( "cSkillStateGetIsEmpowered" ) == 0 then --if the injection point isn't even jit yet
  writeInteger( "bEnhancedMagicScriptState", 2 ) --let the script to deactivate
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEnhancedMagicScriptState" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the script failed!\nHa' )
  error( 'Script disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//cSkillStateGetIsEmpowered:
//dd 1

///*****************************************///
dealloc(newmem)
skillIsEmpoweredChkForDisplayAOB: //CooldownEntry:EntryUpdate+cf:
readmem(originalcode_skillIsEmpoweredChkForDisplayAOB,7)
//db 48 83 EC 20 48 8B 00
//Alt: sub rsp,20
//Alt: mov rax,[rax]
unregistersymbol(originalcode_skillIsEmpoweredChkForDisplayAOB)

unregistersymbol(bEnhancedMagicScriptState)
unregistersymbol(cSkillStateGetIsEmpowered)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="Length" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20" Vartype="Unicode String" Bytesize="128" Description="Value" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="Player" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="m_CachedPtr" DisplayMethod="Unsigned Integer"/>
        <Element Offset="24" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="currentStateName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
        <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="rigidbody2D" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="anim" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="movement" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="health" DisplayMethod="Unsigned Integer">
          <Structure Name="Health" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="m_CachedPtr" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parentFSM" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="entityScript" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="rigidbody2D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="parentObject" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="critHealModStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="damageTakenStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="hitStunModifierStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="knockbackModifierStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" Description="healModifierStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" Description="damageCapStat" DisplayMethod="Unsigned Integer">
                <Structure Name="SyncedNumVarStat" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="topPriorityOverride" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="statChangedEventHandlers" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="modifiers" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" Description="_currentValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Float" Bytesize="4" Description="_baseValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" Description="_modifiedValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="4 Bytes" Bytesize="4" Description="overrideModCount" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Byte" Bytesize="1" Description="syncCurrentToModMax" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Float" Bytesize="4" Description="minCurrentVal" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" Description="minMaxVal" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" Description="healEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" Description="healEnterEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" Description="evadeEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" Description="takeDamageEnterHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" Description="takeDamageEnterHandlersWithHurtEntity" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" Description="takeDamageEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Pointer" Bytesize="8" Description="takeDamageActualHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" Description="preShieldEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" Description="guardEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Pointer" Bytesize="8" Description="shieldEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="Pointer" Bytesize="8" Description="shieldGainEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" Description="deathEventHandlers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Pointer" Bytesize="8" Description="healthStat" DisplayMethod="Unsigned Integer">
                <Structure Name="NumVarStat" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="topPriorityOverride" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="statChangedEventHandlers" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="modifiers" DisplayMethod="Unsigned Integer">
                      <Structure Name="List`1" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                        <Elements>
                          <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="_items" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="24" Vartype="4 Bytes" Bytesize="4" Description="_size" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="28" Vartype="4 Bytes" Bytesize="4" Description="_version" DisplayMethod="Unsigned Integer"/>
                        </Elements>
                      </Structure>
                    </Element>
                    <Element Offset="40" Vartype="Float" Bytesize="4" Description="_currentValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Float" Bytesize="4" Description="_baseValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" Description="_modifiedValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="4 Bytes" Bytesize="4" Description="overrideModCount" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Byte" Bytesize="1" Description="syncCurrentToModMax" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Float" Bytesize="4" Description="minCurrentVal" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" Description="minMaxVal" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="208" Vartype="Pointer" Bytesize="8" Description="allowOverheal" DisplayMethod="Unsigned Integer">
                <Structure Name="Autocreated from 43C14180" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="topPriorityOverride" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="statChangedEventHandlers" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="modifiers" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Byte" Bytesize="1" Description="_currentValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="41" Vartype="Byte" Bytesize="1" Description="_baseValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="42" Vartype="Byte" Bytesize="1" Description="_modifiedValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="4 Bytes" Bytesize="4" Description="overrideModCount" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="216" Vartype="Pointer" Bytesize="8" Description="shieldStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" Description="guardCountStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="Pointer" Bytesize="8" Description="armorStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="Pointer" Bytesize="8" Description="defenseStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="Pointer" Bytesize="8" Description="evadeStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" Description="elemModDict" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="Pointer" Bytesize="8" Description="deathProof" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="Pointer" Bytesize="8" Description="ignoreHurtVarStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="Pointer" Bytesize="8" Description="ignoreKnockbackVarStat" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Pointer" Bytesize="8" Description="spriteList" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Pointer" Bytesize="8" Description="entitySprites" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="Pointer" Bytesize="8" Description="playerEntity" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="Pointer" Bytesize="8" Description="enemyEntity" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" Description="destructibleEntity" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="Pointer" Bytesize="8" Description="lastAttack" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="Pointer" Bytesize="8" Description="lastAttackEnd" DisplayMethod="Unsigned Integer"/>
              <Element Offset="344" Vartype="Pointer" Bytesize="8" Description="currentAtkInfo" DisplayMethod="Unsigned Integer"/>
              <Element Offset="352" Vartype="Pointer" Bytesize="8" Description="currentTransform" DisplayMethod="Unsigned Integer"/>
              <Element Offset="360" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="dmgTextStr" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="impactAudioID" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="Pointer" Bytesize="8" Description="waitForFlashDelay" DisplayMethod="Unsigned Integer"/>
              <Element Offset="384" Vartype="Byte" Bytesize="1" Description="isCriticalHeal" DisplayMethod="Unsigned Integer"/>
              <Element Offset="388" Vartype="Float" Bytesize="4" Description="tempODIncAmount" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="4 Bytes" Bytesize="4" Description="healRestoreAmount" DisplayMethod="Unsigned Integer"/>
              <Element Offset="396" Vartype="4 Bytes" Bytesize="4" Description="hitMaterial" DisplayMethod="Unsigned Integer"/>
              <Element Offset="400" Vartype="4 Bytes" Bytesize="4" Description="calcOverHeal" DisplayMethod="Unsigned Integer"/>
              <Element Offset="404" Vartype="Byte" Bytesize="1" Description="attackShielded" DisplayMethod="Unsigned Integer"/>
              <Element Offset="405" Vartype="Byte" Bytesize="1" Description="attackGuarded" DisplayMethod="Unsigned Integer"/>
              <Element Offset="406" Vartype="Byte" Bytesize="1" Description="passThroughAttack" DisplayMethod="Unsigned Integer"/>
              <Element Offset="408" Vartype="4 Bytes" Bytesize="4" Description="overHeadIcon" DisplayMethod="Unsigned Integer"/>
              <Element Offset="412" Vartype="4 Bytes" Bytesize="4" Description="statusElementType" DisplayMethod="Unsigned Integer"/>
              <Element Offset="416" Vartype="4 Bytes" Bytesize="4" Description="entityElement" DisplayMethod="Unsigned Integer"/>
              <Element Offset="420" Vartype="Byte" Bytesize="1" Description="invulnerable" DisplayMethod="Unsigned Integer"/>
              <Element Offset="421" Vartype="Byte" Bytesize="1" Description="showInvulnerableMsg" DisplayMethod="Unsigned Integer"/>
              <Element Offset="422" Vartype="Byte" Bytesize="1" Description="applyIgnoreHurtMod" DisplayMethod="Unsigned Integer"/>
              <Element Offset="423" Vartype="Byte" Bytesize="1" Description="applyIgnoreKnockbackMod" DisplayMethod="Unsigned Integer"/>
              <Element Offset="424" Vartype="Byte" Bytesize="1" Description="ignoreGrab" DisplayMethod="Unsigned Integer"/>
              <Element Offset="425" Vartype="Byte" Bytesize="1" Description="ignoreHitStunDurationModifier" DisplayMethod="Unsigned Integer"/>
              <Element Offset="426" Vartype="Byte" Bytesize="1" Description="ignoreFrozenState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="427" Vartype="Byte" Bytesize="1" Description="ignoreSlow" DisplayMethod="Unsigned Integer"/>
              <Element Offset="428" Vartype="Byte" Bytesize="1" Description="ignoreBurn" DisplayMethod="Unsigned Integer"/>
              <Element Offset="429" Vartype="Byte" Bytesize="1" Description="ignoreShock" DisplayMethod="Unsigned Integer"/>
              <Element Offset="430" Vartype="Byte" Bytesize="1" Description="ignorePoison" DisplayMethod="Unsigned Integer"/>
              <Element Offset="431" Vartype="Byte" Bytesize="1" Description="ignoreOverdriveProgress" DisplayMethod="Unsigned Integer"/>
              <Element Offset="432" Vartype="Byte" Bytesize="1" Description="forceOverdriveGain" DisplayMethod="Unsigned Integer"/>
              <Element Offset="433" Vartype="Byte" Bytesize="1" Description="ignorePlayerEndStats" DisplayMethod="Unsigned Integer"/>
              <Element Offset="434" Vartype="Byte" Bytesize="1" Description="evadeCrit" DisplayMethod="Unsigned Integer"/>
              <Element Offset="435" Vartype="Byte" Bytesize="1" Description="flashRedOnHit" DisplayMethod="Unsigned Integer"/>
              <Element Offset="436" Vartype="Byte" Bytesize="1" Description="showHitSpark" DisplayMethod="Unsigned Integer"/>
              <Element Offset="437" Vartype="Byte" Bytesize="1" Description="faceHurtDirection" DisplayMethod="Unsigned Integer"/>
              <Element Offset="438" Vartype="Byte" Bytesize="1" Description="showDamageNumbers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="439" Vartype="Byte" Bytesize="1" Description="calcShowDamageNumbers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="440" Vartype="Byte" Bytesize="1" Description="useHurtBoxTransform" DisplayMethod="Unsigned Integer"/>
              <Element Offset="441" Vartype="Byte" Bytesize="1" Description="guardFacingDirection" DisplayMethod="Unsigned Integer"/>
              <Element Offset="444" Vartype="4 Bytes" Bytesize="4" Description="originalColor" DisplayMethod="Unsigned Integer"/>
              <Element Offset="460" Vartype="4 Bytes" Bytesize="4" Description="textColor" DisplayMethod="Unsigned Integer"/>
              <Element Offset="476" Vartype="4 Bytes" Bytesize="4" Description="borderColor" DisplayMethod="Unsigned Integer"/>
              <Element Offset="492" Vartype="Float" Bytesize="4" Description="textSizeScale" DisplayMethod="Unsigned Integer"/>
              <Element Offset="496" Vartype="4 Bytes" Bytesize="4" Description="invulnerabilityStopwatchID" DisplayMethod="Unsigned Integer"/>
              <Element Offset="500" Vartype="Byte" Bytesize="1" Description="invulnerableCoroutineActive" DisplayMethod="Unsigned Integer"/>
              <Element Offset="504" Vartype="Float" Bytesize="4" Description="currentDmgVal" DisplayMethod="Unsigned Integer"/>
              <Element Offset="508" Vartype="4 Bytes" Bytesize="4" Description="currentPosition" DisplayMethod="Unsigned Integer"/>
              <Element Offset="516" Vartype="Byte" Bytesize="1" Description="minDmgRequired" DisplayMethod="Unsigned Integer"/>
              <Element Offset="517" Vartype="Byte" Bytesize="1" Description="atkIsStatus" DisplayMethod="Unsigned Integer"/>
              <Element Offset="520" Vartype="4 Bytes" Bytesize="4" Description="eleDmgModVal" DisplayMethod="Unsigned Integer"/>
              <Element Offset="524" Vartype="4 Bytes" Bytesize="4" Description="tempEleType" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="fall" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="attack" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillCategory" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" Description="hurtBoxTransform" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Pointer" Bytesize="8" Description="hurtBoxCollider" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Pointer" Bytesize="8" Description="floorContact" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Pointer" Bytesize="8" Description="floorCollider" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Pointer" Bytesize="8" Description="preventFallCollider" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Pointer" Bytesize="8" Description="spriteRenderer" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Pointer" Bytesize="8" Description="shadowSprite" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="Pointer" Bytesize="8" Description="animSpeedHandler" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Pointer" Bytesize="8" Description="headPosition" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="Pointer" Bytesize="8" Description="dotManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Pointer" Bytesize="8" Description="airborneStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Pointer" Bytesize="8" Description="inventory" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Pointer" Bytesize="8" Description="foundPath" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="4 Bytes" Bytesize="4" Description="myOrigin" DisplayMethod="Unsigned Integer"/>
        <Element Offset="212" Vartype="4 Bytes" Bytesize="4" Description="originalRotation" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="4 Bytes" Bytesize="4" Description="originalScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="236" Vartype="Byte" Bytesize="1" Description="paused" DisplayMethod="Unsigned Integer"/>
        <Element Offset="237" Vartype="Byte" Bytesize="1" Description="isFacingRight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="4 Bytes" Bytesize="4" Description="facingDirection" DisplayMethod="Unsigned Integer"/>
        <Element Offset="244" Vartype="4 Bytes" Bytesize="4" Description="previousFacingDirection" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
        <Element Offset="252" Vartype="Byte" Bytesize="1" Description="elementFromTileSet" DisplayMethod="Unsigned Integer"/>
        <Element Offset="253" Vartype="Byte" Bytesize="1" Description="disablePreventFallCollider" DisplayMethod="Unsigned Integer"/>
        <Element Offset="254" Vartype="Byte" Bytesize="1" Description="multiAnimHurt" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="Float" Bytesize="4" Description="hitStunDurationModifier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="260" Vartype="Byte" Bytesize="1" Description="ignorePrevHitStunDuration" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="4 Bytes" Bytesize="4" Description="lastTileRow" DisplayMethod="Unsigned Integer"/>
        <Element Offset="268" Vartype="4 Bytes" Bytesize="4" Description="lastTileCol" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Byte" Bytesize="1" Description="worldInfoInitialized" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="4 Bytes" Bytesize="4" Description="quality" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="4 Bytes" Bytesize="4" Description="lineOfSightLayerMask" DisplayMethod="Unsigned Integer"/>
        <Element Offset="284" Vartype="4 Bytes" Bytesize="4" Description="pathIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" Description="skillPickUpEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" Description="skillDropEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" Description="skillReadyEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Pointer" Bytesize="8" Description="skillEnterEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="320" Vartype="Pointer" Bytesize="8" Description="skillExitEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="Pointer" Bytesize="8" Description="removeSkillEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Pointer" Bytesize="8" Description="assignSkillSlotEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="344" Vartype="Pointer" Bytesize="8" Description="cancelToBasicEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="352" Vartype="Pointer" Bytesize="8" Description="cancelFromBasicEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="360" Vartype="Pointer" Bytesize="8" Description="cancelToDashEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="368" Vartype="Pointer" Bytesize="8" Description="hurtRecoverEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="376" Vartype="Pointer" Bytesize="8" Description="enemyKillEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="384" Vartype="Pointer" Bytesize="8" Description="onSurvivalRoomEnterHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="392" Vartype="Pointer" Bytesize="8" Description="instance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="400" Vartype="Pointer" Bytesize="8" Description="playerData" DisplayMethod="Unsigned Integer"/>
        <Element Offset="408" Vartype="Pointer" Bytesize="8" Description="spriteMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="416" Vartype="Pointer" Bytesize="8" Description="skillsDict" DisplayMethod="Unsigned Integer"/>
        <Element Offset="424" Vartype="Pointer" Bytesize="8" Description="skillIDs" DisplayMethod="Unsigned Integer">
          <Structure Name="String[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" Description="Count" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="Item[0]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="Item[1]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="Item[2]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="Item[3]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="Item[4]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="Item[5]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="Item[6]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="Item[7]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="Item[8]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" Description="Item[9]" DisplayMethod="Unsigned Integer">
                <Structure Name="System.String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="length" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="String" Bytesize="1" Description="start_char" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="432" Vartype="Pointer" Bytesize="8" Description="skillStates" DisplayMethod="Unsigned Integer">
          <Structure Name="SkillState[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" Description="Count" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="Item[0]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="Item[1]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="Item[2]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer">
                      <Structure Name="StatData" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                        <Elements>
                          <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="statDict" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="24" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="category" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="numVarStatDict" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="boolVarStatDict" DisplayMethod="Unsigned Integer"/>
                          <Element Offset="48" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                        </Elements>
                      </Structure>
                    </Element>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="Item[3]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="Item[4]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="Item[5]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="Item[6]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="Item[7]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="Item[8]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" Description="Item[9]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="440" Vartype="Pointer" Bytesize="8" Description="assignedSkills" DisplayMethod="Unsigned Integer">
          <Structure Name="SkillState[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" Description="Count" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="Item[0]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="Item[1]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="Item[2]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="Item[3]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="Item[4]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="Item[5]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="Item[6]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="Item[7]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="Item[8]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" Description="Item[9]" DisplayMethod="Unsigned Integer">
                <Structure Name="Player+SkillState" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="fsm" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="parent" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="&lt;name&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="skillID" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillData" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="empoweredStat" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="cooldownRef" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="prevSkillState" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="cancelToDashSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="element" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="92" Vartype="Byte" Bytesize="1" Description="isUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="93" Vartype="Byte" Bytesize="1" Description="hasSignatureVariant" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="94" Vartype="Byte" Bytesize="1" Description="signatureUnlocked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="95" Vartype="Byte" Bytesize="1" Description="isSignature" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="4 Bytes" Bytesize="4" Description="currentLevel" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="100" Vartype="Byte" Bytesize="1" Description="isUltimate" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="101" Vartype="Byte" Bytesize="1" Description="hasEmpowered" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="102" Vartype="Byte" Bytesize="1" Description="isBasic" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="103" Vartype="Byte" Bytesize="1" Description="isDash" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Byte" Bytesize="1" Description="isMovementSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="105" Vartype="Byte" Bytesize="1" Description="isMeleeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="106" Vartype="Byte" Bytesize="1" Description="isProjectileSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="107" Vartype="Byte" Bytesize="1" Description="isWaveSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="108" Vartype="Byte" Bytesize="1" Description="isBuffSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="109" Vartype="Byte" Bytesize="1" Description="isSummonSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="110" Vartype="Byte" Bytesize="1" Description="isWardSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Float" Bytesize="4" Description="currentAnimTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="116" Vartype="Float" Bytesize="4" Description="animStartTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Float" Bytesize="4" Description="animHoldTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="124" Vartype="Float" Bytesize="4" Description="animExecTime" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Float" Bytesize="4" Description="cancelThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="132" Vartype="Float" Bytesize="4" Description="runThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Float" Bytesize="4" Description="exitThreshold" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="140" Vartype="4 Bytes" Bytesize="4" Description="inputVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="148" Vartype="4 Bytes" Bytesize="4" Description="skillSlot" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Byte" Bytesize="1" Description="isChargeSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="153" Vartype="Byte" Bytesize="1" Description="applyStopElementStatus" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="154" Vartype="Byte" Bytesize="1" Description="disableStartCooldown" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="155" Vartype="Byte" Bytesize="1" Description="startCooldownOnEnter" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="156" Vartype="Byte" Bytesize="1" Description="allowSelfTransition" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="157" Vartype="Byte" Bytesize="1" Description="allowRepeating" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="158" Vartype="Byte" Bytesize="1" Description="repeatLock" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="159" Vartype="Byte" Bytesize="1" Description="isHoldSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="holdStarted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="161" Vartype="Byte" Bytesize="1" Description="holdReleased" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="162" Vartype="Byte" Bytesize="1" Description="updateHoldAnim" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="163" Vartype="Byte" Bytesize="1" Description="hasEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="reqEleSyn" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="Byte" Bytesize="1" Description="eleSynAvailable" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="169" Vartype="Byte" Bytesize="1" Description="&lt;SkillExecuted&gt;k__BackingField" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="448" Vartype="Pointer" Bytesize="8" Description="cooldownManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="456" Vartype="Pointer" Bytesize="8" Description="lowerHUD" DisplayMethod="Unsigned Integer">
          <Structure Name="LowerHUD" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="hudObj" DisplayMethod="Unsigned Integer">
                <Structure Name="GameObject" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="m_CachedPtr" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="player" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="cooldownUI" DisplayMethod="Unsigned Integer">
                <Structure Name="CooldownUI" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="m_CachedPtr" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="skillBGSprites" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="cooldownEntries" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="player" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="stockSkill" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" Description="cooldownPingDelay" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="4 Bytes" Bytesize="4" Description="cdPingStopwatchID" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="equipMenu" DisplayMethod="Unsigned Integer">
                <Structure Name="EquipMenu" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="m_CachedPtr" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="player" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="parentHUD" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="buttonImages" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="skillIcons" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="skillBorders" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="skillSelectedBorder" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="swapText" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" Description="swapPrompt" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="Pointer" Bytesize="8" Description="dropPrompt" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" Description="swapButtonImage" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="Pointer" Bytesize="8" Description="dropButtonImage" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" Description="selectionBorder" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="Pointer" Bytesize="8" Description="skillToSwap" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" Description="stockSkillBar" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="Pointer" Bytesize="8" Description="inventoryMenu" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" Description="infoWindow" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="Pointer" Bytesize="8" Description="infoText" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Byte" Bytesize="1" Description="referencesFound" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="164" Vartype="4 Bytes" Bytesize="4" Description="navigationIndex" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="168" Vartype="4 Bytes" Bytesize="4" Description="maxSkillCount" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="172" Vartype="4 Bytes" Bytesize="4" Description="swapTextColor" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="188" Vartype="4 Bytes" Bytesize="4" Description="selectionColor" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="204" Vartype="4 Bytes" Bytesize="4" Description="skillToSwapColor" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="220" Vartype="Float" Bytesize="4" Description="fadeAlphaValue" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="224" Vartype="Byte" Bytesize="1" Description="fadeOut" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="228" Vartype="4 Bytes" Bytesize="4" Description="cursorVector" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="236" Vartype="Byte" Bytesize="1" Description="inputReceived" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="237" Vartype="Byte" Bytesize="1" Description="currentlySwapping" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="240" Vartype="4 Bytes" Bytesize="4" Description="skillToSwapIndex" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="244" Vartype="Byte" Bytesize="1" Description="menuClicked" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="245" Vartype="Byte" Bytesize="1" Description="quickSwapCompleted" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="246" Vartype="Byte" Bytesize="1" Description="hasFocus" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="inventoryMenu" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="infoWindow" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="infoText" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="stockSkill" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Byte" Bytesize="1" Description="equipMenuActive" DisplayMethod="Unsigned Integer"/>
              <Element Offset="81" Vartype="Byte" Bytesize="1" Description="equipMenuAllowed" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="464" Vartype="Pointer" Bytesize="8" Description="statusBar" DisplayMethod="Unsigned Integer"/>
        <Element Offset="472" Vartype="Pointer" Bytesize="8" Description="stockSkill" DisplayMethod="Unsigned Integer"/>
        <Element Offset="480" Vartype="Pointer" Bytesize="8" Description="playerSummonsList" DisplayMethod="Unsigned Integer"/>
        <Element Offset="488" Vartype="Pointer" Bytesize="8" Description="leftHandTransform" DisplayMethod="Unsigned Integer"/>
        <Element Offset="496" Vartype="Pointer" Bytesize="8" Description="rightHandTransform" DisplayMethod="Unsigned Integer"/>
        <Element Offset="504" Vartype="Pointer" Bytesize="8" Description="spriteTrail" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Pointer" Bytesize="8" Description="overdriveEffects" DisplayMethod="Unsigned Integer"/>
        <Element Offset="520" Vartype="Pointer" Bytesize="8" Description="overdriveSkillRef" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="Pointer" Bytesize="8" Description="odPauseStopwatch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="536" Vartype="Pointer" Bytesize="8" Description="odPauseValStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="544" Vartype="Pointer" Bytesize="8" Description="overdriveCard" DisplayMethod="Unsigned Integer"/>
        <Element Offset="552" Vartype="Pointer" Bytesize="8" Description="overdriveEventHandlers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Pointer" Bytesize="8" Description="overdriveBuildDecayRate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="568" Vartype="Pointer" Bytesize="8" Description="overdriveActiveDecayRate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="576" Vartype="Pointer" Bytesize="8" Description="curOverdriveDecayRate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="Pointer" Bytesize="8" Description="dustEmitter" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Pointer" Bytesize="8" Description="elemBoostManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Pointer" Bytesize="8" Description="allowHurtRecover" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="Pointer" Bytesize="8" Description="overdriveResetsCDInstead" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="Pointer" Bytesize="8" Description="overdriveDoubleStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="Pointer" Bytesize="8" Description="overdriveHealsInstead" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="Pointer" Bytesize="8" Description="runSpeedupStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="640" Vartype="Pointer" Bytesize="8" Description="statueCamoStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Pointer" Bytesize="8" Description="hitImmuneStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="656" Vartype="Pointer" Bytesize="8" Description="healthRegenStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="664" Vartype="Pointer" Bytesize="8" Description="regenEffect" DisplayMethod="Unsigned Integer"/>
        <Element Offset="672" Vartype="Pointer" Bytesize="8" Description="_fallDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="Pointer" Bytesize="8" Description="dashTrails" DisplayMethod="Unsigned Integer"/>
        <Element Offset="688" Vartype="Pointer" Bytesize="8" Description="ignoreDashSlide" DisplayMethod="Unsigned Integer"/>
        <Element Offset="696" Vartype="Pointer" Bytesize="8" Description="newItemNoticeUI" DisplayMethod="Unsigned Integer"/>
        <Element Offset="704" Vartype="Pointer" Bytesize="8" Description="hud" DisplayMethod="Unsigned Integer"/>
        <Element Offset="712" Vartype="Pointer" Bytesize="8" Description="deathMenu" DisplayMethod="Unsigned Integer"/>
        <Element Offset="720" Vartype="Pointer" Bytesize="8" Description="deathMenuItems" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="Pointer" Bytesize="8" Description="overheadPrompt" DisplayMethod="Unsigned Integer"/>
        <Element Offset="736" Vartype="Pointer" Bytesize="8" Description="inputDevice" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="Pointer" Bytesize="8" Description="targetLine" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="Pointer" Bytesize="8" Description="playerMarker" DisplayMethod="Unsigned Integer"/>
        <Element Offset="760" Vartype="Pointer" Bytesize="8" Description="throwScript" DisplayMethod="Unsigned Integer"/>
        <Element Offset="768" Vartype="Pointer" Bytesize="8" Description="hurtBoxObj" DisplayMethod="Unsigned Integer"/>
        <Element Offset="776" Vartype="Pointer" Bytesize="8" Description="attackOriginTrans" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="Pointer" Bytesize="8" Description="cameraLockTransform" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Pointer" Bytesize="8" Description="playerLight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="outfitID" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Pointer" Bytesize="8" Description="outfitColorStat" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="Pointer" Bytesize="8" Description="outfitColorMod" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Pointer" Bytesize="8" ChildStruct="String" Description="designatedItemID" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Pointer" Bytesize="8" Description="spriteSorter" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="Pointer" Bytesize="8" Description="stuckInWallTimer" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="Pointer" Bytesize="8" Description="floorDistances" DisplayMethod="Unsigned Integer"/>
        <Element Offset="856" Vartype="Pointer" Bytesize="8" Description="floorFloatDistances" DisplayMethod="Unsigned Integer"/>
        <Element Offset="864" Vartype="Pointer" Bytesize="8" Description="stats" DisplayMethod="Unsigned Integer"/>
        <Element Offset="872" Vartype="Pointer" Bytesize="8" Description="randRelicIDs" DisplayMethod="Unsigned Integer"/>
        <Element Offset="880" Vartype="Pointer" Bytesize="8" Description="randSkillsDict" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="Pointer" Bytesize="8" Description="randOutfitIDs" DisplayMethod="Unsigned Integer"/>
        <Element Offset="896" Vartype="Pointer" Bytesize="8" Description="playerObjTrans" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="Pointer" Bytesize="8" Description="playerMinimapPortrait" DisplayMethod="Unsigned Integer"/>
        <Element Offset="912" Vartype="4 Bytes" Bytesize="4" Description="playerID" DisplayMethod="Unsigned Integer"/>
        <Element Offset="916" Vartype="Byte" Bytesize="1" Description="playForehandAnim" DisplayMethod="Unsigned Integer"/>
        <Element Offset="917" Vartype="Byte" Bytesize="1" Description="forehandAnimPlayed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="920" Vartype="Float" Bytesize="4" Description="overdriveInvincibleTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="924" Vartype="Float" Bytesize="4" Description="overdriveValue" DisplayMethod="Unsigned Integer"/>
        <Element Offset="928" Vartype="Float" Bytesize="4" Description="overdriveMinValue" DisplayMethod="Unsigned Integer"/>
        <Element Offset="932" Vartype="Byte" Bytesize="1" Description="overdriveTimedOut" DisplayMethod="Unsigned Integer"/>
        <Element Offset="933" Vartype="Byte" Bytesize="1" Description="overdriveReady" DisplayMethod="Unsigned Integer"/>
        <Element Offset="934" Vartype="Byte" Bytesize="1" Description="overdriveDoubleUsed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="936" Vartype="Float" Bytesize="4" Description="overdriveHealValue" DisplayMethod="Unsigned Integer"/>
        <Element Offset="940" Vartype="Byte" Bytesize="1" Description="parryAllowed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="944" Vartype="Float" Bytesize="4" Description="parryAllowedTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="948" Vartype="4 Bytes" Bytesize="4" Description="regenStopwatchID" DisplayMethod="Unsigned Integer"/>
        <Element Offset="952" Vartype="Float" Bytesize="4" Description="regenInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="956" Vartype="Float" Bytesize="4" Description="regenDelay" DisplayMethod="Unsigned Integer"/>
        <Element Offset="960" Vartype="Byte" Bytesize="1" Description="regenEnabled" DisplayMethod="Unsigned Integer"/>
        <Element Offset="961" Vartype="Byte" Bytesize="1" Description="regenStarted" DisplayMethod="Unsigned Integer"/>
        <Element Offset="962" Vartype="Byte" Bytesize="1" Description="regenCompleted" DisplayMethod="Unsigned Integer"/>
        <Element Offset="963" Vartype="Byte" Bytesize="1" Description="regenEffectPlayed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="964" Vartype="4 Bytes" Bytesize="4" Description="regenAudioInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="4 Bytes" Bytesize="4" Description="reqTeleLocation" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="4 Bytes" Bytesize="4" Description="lastCheckpoint" DisplayMethod="Unsigned Integer"/>
        <Element Offset="984" Vartype="Float" Bytesize="4" Description="initLightIntensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="988" Vartype="Float" Bytesize="4" Description="currentLightIntensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="992" Vartype="4 Bytes" Bytesize="4" Description="capeColor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1008" Vartype="4 Bytes" Bytesize="4" Description="outfitColorIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1012" Vartype="Byte" Bytesize="1" Description="floorPosFound" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1013" Vartype="Byte" Bytesize="1" Description="dirFloorPosFound" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1014" Vartype="Byte" Bytesize="1" Description="spawnGhostOnDeath" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1016" Vartype="4 Bytes" Bytesize="4" Description="randRelicCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1020" Vartype="4 Bytes" Bytesize="4" Description="randOutfitCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1024" Vartype="4 Bytes" Bytesize="4" Description="tempInputVec" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="String" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="Length" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20" Vartype="Unicode String" Bytesize="128" Description="Value" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
  </Structures>
  <Comments>https://fearlessrevolution.com/threads/wizard-of-legend-3.6792/
</Comments>
</CheatTable>

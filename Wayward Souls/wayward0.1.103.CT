<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Unlimited Energy"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : wayward.exe
  Version: 
  Date   : 2018-07-24
  Author : Me

  This script does blah blah blah
}

define(address,"wayward.exe"+FEE4C)
define(bytes,D9 1B 8B 75 E8)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  nop
  mov esi,[ebp-18]
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // fstp dword ptr [ebx]
  // mov esi,[ebp-18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "wayward.exe"+FEE4C

"wayward.exe"+FEE2D: 64 89 0D 00 00 00 00           -  mov fs:[00000000],ecx
"wayward.exe"+FEE34: 5F                             -  pop edi
"wayward.exe"+FEE35: 5E                             -  pop esi
"wayward.exe"+FEE36: 5B                             -  pop ebx
"wayward.exe"+FEE37: C9                             -  leave 
"wayward.exe"+FEE38: C2 08 00                       -  ret 0008
"wayward.exe"+FEE3B: 8B 5D E8                       -  mov ebx,[ebp-18]
"wayward.exe"+FEE3E: 81 C3 C0 00 00 00              -  add ebx,000000C0
"wayward.exe"+FEE44: D9 85 88 FD FF FF              -  fld dword ptr [ebp-00000278]
"wayward.exe"+FEE4A: D8 2B                          -  fsubr dword ptr [ebx]
// ---------- INJECTING HERE ----------
"wayward.exe"+FEE4C: D9 1B                          -  fstp dword ptr [ebx]
"wayward.exe"+FEE4E: 8B 75 E8                       -  mov esi,[ebp-18]
// ---------- DONE INJECTING  ----------
"wayward.exe"+FEE51: D9 86 C0 00 00 00              -  fld dword ptr [esi+000000C0]
"wayward.exe"+FEE57: D9 E4                          -  ftst 
"wayward.exe"+FEE59: DF E0                          -  fnstsw ax
"wayward.exe"+FEE5B: 9E                             -  sahf 
"wayward.exe"+FEE5C: DD D8                          -  fstp st(0)
"wayward.exe"+FEE5E: 73 11                          -  jae wayward.exe+FEE71
"wayward.exe"+FEE60: 7A 0F                          -  jp wayward.exe+FEE71
"wayward.exe"+FEE62: 8B 4D E8                       -  mov ecx,[ebp-18]
"wayward.exe"+FEE65: 81 C1 C0 00 00 00              -  add ecx,000000C0
"wayward.exe"+FEE6B: C7 01 00 00 00 00              -  mov [ecx],00000000
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"No Damage Taken"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : wayward.exe
  Version: 
  Date   : 2018-07-24
  Author : Me

  This script does blah blah blah
}

define(address,"wayward.exe"+FBB17)
define(bytes,66 29 0B 83 BD 34 FE FF FF 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  nop
  cmp dword ptr [ebp-000001CC],00
  jmp return

address:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes
  // sub [ebx],cx
  // cmp dword ptr [ebp-000001CC],00

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "wayward.exe"+FBB17

"wayward.exe"+FBAEF: 8B 41 0C                       -  mov eax,[ecx+0C]
"wayward.exe"+FBAF2: 80 B8 DC 00 00 00 00           -  cmp byte ptr [eax+000000DC],00
"wayward.exe"+FBAF9: 74 0F                          -  je wayward.exe+FBB0A
"wayward.exe"+FBAFB: 8B 75 FC                       -  mov esi,[ebp-04]
"wayward.exe"+FBAFE: 8B 56 0C                       -  mov edx,[esi+0C]
"wayward.exe"+FBB01: 80 BA DD 00 00 00 00           -  cmp byte ptr [edx+000000DD],00
"wayward.exe"+FBB08: 75 10                          -  jne wayward.exe+FBB1A
"wayward.exe"+FBB0A: 8B 5D FC                       -  mov ebx,[ebp-04]
"wayward.exe"+FBB0D: 83 C3 28                       -  add ebx,28
"wayward.exe"+FBB10: 0F BF 8D 34 FE FF FF           -  movsx ecx,word ptr [ebp-000001CC]
// ---------- INJECTING HERE ----------
"wayward.exe"+FBB17: 66 29 0B                       -  sub [ebx],cx
"wayward.exe"+FBB1A: 83 BD 34 FE FF FF 00           -  cmp dword ptr [ebp-000001CC],00
// ---------- DONE INJECTING  ----------
"wayward.exe"+FBB21: 0F 8E 39 01 00 00              -  jng wayward.exe+FBC60
"wayward.exe"+FBB27: 8B 45 FC                       -  mov eax,[ebp-04]
"wayward.exe"+FBB2A: 80 B8 B1 01 00 00 05           -  cmp byte ptr [eax+000001B1],05
"wayward.exe"+FBB31: 75 2A                          -  jne wayward.exe+FBB5D
"wayward.exe"+FBB33: 8B 75 FC                       -  mov esi,[ebp-04]
"wayward.exe"+FBB36: 8B 56 0C                       -  mov edx,[esi+0C]
"wayward.exe"+FBB39: 66 83 BA A2 00 00 00 00        -  cmp word ptr [edx+000000A2],00
"wayward.exe"+FBB41: 0F 8E B1 00 00 00              -  jng wayward.exe+FBBF8
"wayward.exe"+FBB47: 8B 5D FC                       -  mov ebx,[ebp-04]
"wayward.exe"+FBB4A: 8B 4B 0C                       -  mov ecx,[ebx+0C]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Unlimited Equipment"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : wayward.exe
  Version: 
  Date   : 2018-07-24
  Author : Meo

  This script does blah blah blah
}

define(address,"wayward.exe"+FEA74)
define(bytes,FF 49 38 E9 CE 01 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  nop
  jmp wayward.exe+FEC4A
  jmp return

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes
  // dec [ecx+38]
  // jmp wayward.exe+FEC4A

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "wayward.exe"+FEA74

"wayward.exe"+FEA50: 80 F9 02                       -  cmp cl,02
"wayward.exe"+FEA53: 72 10                          -  jb wayward.exe+FEA65
"wayward.exe"+FEA55: 68 75 0F 00 00                 -  push 00000F75
"wayward.exe"+FEA5A: BE DC 48 4F 00                 -  mov esi,wayward.exe+F48DC
"wayward.exe"+FEA5F: 56                             -  push esi
"wayward.exe"+FEA60: E8 A7 59 07 00                 -  call wayward.exe+17440C
"wayward.exe"+FEA65: 8B 45 E8                       -  mov eax,[ebp-18]
"wayward.exe"+FEA68: 8B 90 B4 01 00 00              -  mov edx,[eax+000001B4]
"wayward.exe"+FEA6E: 0F B6 D9                       -  movzx ebx,cl
"wayward.exe"+FEA71: 8D 0C 9A                       -  lea ecx,[edx+ebx*4]
// ---------- INJECTING HERE ----------
"wayward.exe"+FEA74: FF 49 38                       -  dec [ecx+38]
"wayward.exe"+FEA77: E9 CE 01 00 00                 -  jmp wayward.exe+FEC4A
// ---------- DONE INJECTING  ----------
"wayward.exe"+FEA7C: 8B 75 E8                       -  mov esi,[ebp-18]
"wayward.exe"+FEA7F: 89 F0                          -  mov eax,esi
"wayward.exe"+FEA81: 8B 10                          -  mov edx,[eax]
"wayward.exe"+FEA83: FF 92 D8 00 00 00              -  call dword ptr [edx+000000D8]
"wayward.exe"+FEA89: 8B 5D E8                       -  mov ebx,[ebp-18]
"wayward.exe"+FEA8C: 83 C3 6C                       -  add ebx,6C
"wayward.exe"+FEA8F: B9 00 1A 47 00                 -  mov ecx,wayward.exe+71A00
"wayward.exe"+FEA94: 51                             -  push ecx
"wayward.exe"+FEA95: 6A 05                          -  push 05
"wayward.exe"+FEA97: C7 85 48 FD FF FF 00 00 00 00  -  mov [ebp-000002B8],00000000
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of fstp dword ptr [ebx]</Description>
      <Address>004FEE4C</Address>
      <ModuleName>wayward.exe</ModuleName>
      <ModuleNameOffset>FEE4C</ModuleNameOffset>
      <Before>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>D8</Byte>
        <Byte>2B</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>1B</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>75</Byte>
        <Byte>E8</Byte>
        <Byte>D9</Byte>
        <Byte>86</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
